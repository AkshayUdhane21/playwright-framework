version: '3.8'

services:
  # Service Registry (Eureka)
  service-registry:
    image: steeltoeoss/eureka-server:3.1.0
    container_name: service-registry
    ports:
      - "8761:8761"
    environment:
      - EUREKA_CLIENT_REGISTER_WITH_EUREKA=false
      - EUREKA_CLIENT_FETCH_REGISTRY=false
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Mock OPC UA Service
  opcua-service:
    image: mcr.microsoft.com/dotnet/aspnet:6.0
    container_name: opcua-service
    ports:
      - "8081:8080"
    environment:
      - ASPNETCORE_URLS=http://+:8080
    command: >
      sh -c "
        echo 'Starting mock OPC UA service...' &&
        while true; do
          echo 'OPC UA Service is running on port 8080'
          sleep 30
        done
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Mock Read Data Service
  readdata-service:
    image: mcr.microsoft.com/dotnet/aspnet:6.0
    container_name: readdata-service
    ports:
      - "8082:8080"
    environment:
      - ASPNETCORE_URLS=http://+:8080
    command: >
      sh -c "
        echo 'Starting mock Read Data service...' &&
        while true; do
          echo 'Read Data Service is running on port 8080'
          sleep 30
        done
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Mock Kafka Service
  kafka-service:
    image: mcr.microsoft.com/dotnet/aspnet:6.0
    container_name: kafka-service
    ports:
      - "8083:8080"
    environment:
      - ASPNETCORE_URLS=http://+:8080
    command: >
      sh -c "
        echo 'Starting mock Kafka service...' &&
        while true; do
          echo 'Kafka Service is running on port 8080'
          sleep 30
        done
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Mock Write Data Service
  writedata-service:
    image: mcr.microsoft.com/dotnet/aspnet:6.0
    container_name: writedata-service
    ports:
      - "8084:8080"
    environment:
      - ASPNETCORE_URLS=http://+:8080
    command: >
      sh -c "
        echo 'Starting mock Write Data service...' &&
        while true; do
          echo 'Write Data Service is running on port 8080'
          sleep 30
        done
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

networks:
  default:
    name: microservices-test-network
