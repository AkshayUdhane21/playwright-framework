<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="91" passed="88" failed="3" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-10-03T15:21:39 IST" name="Microservices API Test Suite" finished-at="2025-10-03T15:21:41 IST" duration-ms="2165">
    <groups>
    </groups>
    <test started-at="2025-10-03T15:21:39 IST" name="OPC UA Connection Service Tests" finished-at="2025-10-03T15:21:40 IST" duration-ms="1293">
      <class name="tests.OpUaConnectionServiceTest">
        <test-method is-config="true" signature="setUpRealServiceContext()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:39 IST" name="setUpRealServiceContext" finished-at="2025-10-03T15:21:40 IST" duration-ms="457" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpRealServiceContext -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=OpUaConnectionServiceTest.testOpcUaConnectionConnect()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="setUpOpUaTests()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="setUpOpUaTests" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOpUaTests -->
        <test-method signature="testOpcUaConnectionConnect()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="testOpcUaConnectionConnect" description="Test OPC UA connection establishment" finished-at="2025-10-03T15:21:40 IST" duration-ms="141" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcUaConnectionConnect -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testOpcUaConnectionConnect status=SUCCESS method=OpUaConnectionServiceTest.testOpcUaConnectionConnect()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=OpUaConnectionServiceTest.testOpcUaConnectionErrorHandling()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testOpcUaConnectionErrorHandling()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="testOpcUaConnectionErrorHandling" description="Test OPC UA connection error handling" finished-at="2025-10-03T15:21:40 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcUaConnectionErrorHandling -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testOpcUaConnectionErrorHandling status=SUCCESS method=OpUaConnectionServiceTest.testOpcUaConnectionErrorHandling()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=OpUaConnectionServiceTest.testOpcUaConnectionInit()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testOpcUaConnectionInit()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="testOpcUaConnectionInit" description="Test OPC UA connection initialization" finished-at="2025-10-03T15:21:40 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcUaConnectionInit -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testOpcUaConnectionInit status=SUCCESS method=OpUaConnectionServiceTest.testOpcUaConnectionInit()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=OpUaConnectionServiceTest.testOpcUaConnectionPerformance()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testOpcUaConnectionPerformance()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="testOpcUaConnectionPerformance" description="Test OPC UA connection performance" finished-at="2025-10-03T15:21:40 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcUaConnectionPerformance -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testOpcUaConnectionPerformance status=SUCCESS method=OpUaConnectionServiceTest.testOpcUaConnectionPerformance()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=OpUaConnectionServiceTest.testOpcUaConnectionRetry()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testOpcUaConnectionRetry()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="testOpcUaConnectionRetry" description="Test OPC UA connection retry mechanism" finished-at="2025-10-03T15:21:40 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcUaConnectionRetry -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testOpcUaConnectionRetry status=SUCCESS method=OpUaConnectionServiceTest.testOpcUaConnectionRetry()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=OpUaConnectionServiceTest.testOpcUaConnectionSequence()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testOpcUaConnectionSequence()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="testOpcUaConnectionSequence" description="Test OPC UA connection sequence" finished-at="2025-10-03T15:21:40 IST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcUaConnectionSequence -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testOpcUaConnectionSequence status=SUCCESS method=OpUaConnectionServiceTest.testOpcUaConnectionSequence()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testOpcUaConnectionStatus()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="testOpcUaConnectionStatus" description="Test OPC UA connection status endpoint" finished-at="2025-10-03T15:21:40 IST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcUaConnectionStatus -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=OpUaConnectionServiceTest.testOpcUaConnectionStatus()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testOpcUaConnectionStatus status=SUCCESS method=OpUaConnectionServiceTest.testOpcUaConnectionStatus()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=OpUaConnectionServiceTest.testOpcUaServiceHealth()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testOpcUaServiceHealth()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="testOpcUaServiceHealth" description="Test OPC UA service health check" finished-at="2025-10-03T15:21:40 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcUaServiceHealth -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testOpcUaServiceHealth status=SUCCESS method=OpUaConnectionServiceTest.testOpcUaServiceHealth()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="tearDownRealServiceContext()[pri:0, instance:tests.OpUaConnectionServiceTest@10a9d961]" started-at="2025-10-03T15:21:40 IST" name="tearDownRealServiceContext" finished-at="2025-10-03T15:21:40 IST" duration-ms="383" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownRealServiceContext -->
      </class> <!-- tests.OpUaConnectionServiceTest -->
    </test> <!-- OPC UA Connection Service Tests -->
    <test started-at="2025-10-03T15:21:39 IST" name="Read Data Service Tests" finished-at="2025-10-03T15:21:40 IST" duration-ms="1304">
      <class name="tests.ReadDataServiceTest">
        <test-method is-config="true" signature="setUpRealServiceContext()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:39 IST" name="setUpRealServiceContext" finished-at="2025-10-03T15:21:40 IST" duration-ms="456" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpRealServiceContext -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testBrowseTags()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="setUpReadDataTests()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="setUpReadDataTests" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpReadDataTests -->
        <test-method signature="testBrowseTags()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="testBrowseTags" description="Test browse tags endpoint" finished-at="2025-10-03T15:21:40 IST" duration-ms="141" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBrowseTags -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testBrowseTags status=SUCCESS method=ReadDataServiceTest.testBrowseTags()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testBrowseTagsWithDefaultNode()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testBrowseTagsWithDefaultNode()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="testBrowseTagsWithDefaultNode" description="Test browse tags with default node" finished-at="2025-10-03T15:21:40 IST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBrowseTagsWithDefaultNode -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testBrowseTagsWithDefaultNode status=SUCCESS method=ReadDataServiceTest.testBrowseTagsWithDefaultNode()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testConcurrentReadOperations()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testConcurrentReadOperations()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="testConcurrentReadOperations" description="Test concurrent read operations" finished-at="2025-10-03T15:21:40 IST" duration-ms="18" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentReadOperations -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConcurrentReadOperations status=SUCCESS method=ReadDataServiceTest.testConcurrentReadOperations()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testReadDataErrorHandling()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="testReadDataErrorHandling" description="Test read data error handling" finished-at="2025-10-03T15:21:40 IST" duration-ms="3" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Should return error status for invalid node ID expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Should return error status for invalid node ID expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertTrue(Assert.java:57)
at tests.ReadDataServiceTest.testReadDataErrorHandling(ReadDataServiceTest.java:144)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:228)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:961)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:201)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:819)
at org.testng.TestRunner.run(TestRunner.java:619)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:481)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:58)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadDataErrorHandling -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadDataErrorHandling()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadDataErrorHandling status=FAILURE method=ReadDataServiceTest.testReadDataErrorHandling()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadDataPerformance()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadDataPerformance()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="testReadDataPerformance" description="Test read data performance under load" finished-at="2025-10-03T15:21:40 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadDataPerformance -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadDataPerformance status=SUCCESS method=ReadDataServiceTest.testReadDataPerformance()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadDataServiceHealth()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadDataServiceHealth()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="testReadDataServiceHealth" description="Test read data service health" finished-at="2025-10-03T15:21:40 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadDataServiceHealth -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadDataServiceHealth status=SUCCESS method=ReadDataServiceTest.testReadDataServiceHealth()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testReadNode()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="testReadNode" description="Test read node endpoint" finished-at="2025-10-03T15:21:40 IST" duration-ms="25" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadNode -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadNode()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadNode status=SUCCESS method=ReadDataServiceTest.testReadNode()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadNode2()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadNode2()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="testReadNode2" description="Test read node2 endpoint" finished-at="2025-10-03T15:21:40 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadNode2 -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadNode2 status=SUCCESS method=ReadDataServiceTest.testReadNode2()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadTagValuesSimplified()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadTagValuesSimplified()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="testReadTagValuesSimplified" description="Test read tag values simplified" finished-at="2025-10-03T15:21:40 IST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadTagValuesSimplified -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadTagValuesSimplified status=SUCCESS method=ReadDataServiceTest.testReadTagValuesSimplified()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadValue()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadValue()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="testReadValue" description="Test read value endpoint" finished-at="2025-10-03T15:21:40 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadValue -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadValue status=SUCCESS method=ReadDataServiceTest.testReadValue()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="testReadValueWithDifferentNodes" description="Test read value with different node IDs" data-provider="nodeIdProvider" finished-at="2025-10-03T15:21:40 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s="PLC_To_WMS"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[PLC to WMS communication node]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadValueWithDifferentNodes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadValueWithDifferentNodes status=SUCCESS method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="testReadValueWithDifferentNodes" description="Test read value with different node IDs" data-provider="nodeIdProvider" finished-at="2025-10-03T15:21:40 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s="WMS_To_PLC"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[WMS to PLC communication node]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadValueWithDifferentNodes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadValueWithDifferentNodes status=SUCCESS method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="testReadValueWithDifferentNodes" description="Test read value with different node IDs" data-provider="nodeIdProvider" finished-at="2025-10-03T15:21:40 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s=DataBlocksGlobal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Global data blocks node]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadValueWithDifferentNodes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadValueWithDifferentNodes status=SUCCESS method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="testReadValueWithDifferentNodes" description="Test read value with different node IDs" data-provider="nodeIdProvider" finished-at="2025-10-03T15:21:40 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=0;i=2253]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Numeric node ID]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadValueWithDifferentNodes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadValueWithDifferentNodes status=SUCCESS method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="testReadValueWithDifferentNodes" description="Test read value with different node IDs" data-provider="nodeIdProvider" finished-at="2025-10-03T15:21:40 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=2;i=5001]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Another numeric node ID]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadValueWithDifferentNodes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadValueWithDifferentNodes status=SUCCESS method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="testReadValueWithDifferentNodes" description="Test read value with different node IDs" data-provider="nodeIdProvider" finished-at="2025-10-03T15:21:40 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[MCOM]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Communication node]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadValueWithDifferentNodes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadValueWithDifferentNodes status=SUCCESS method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testSubscribeToData()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testSubscribeToData()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="testSubscribeToData" description="Test subscribe to data endpoint" finished-at="2025-10-03T15:21:40 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubscribeToData -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testSubscribeToData status=SUCCESS method=ReadDataServiceTest.testSubscribeToData()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="tearDownRealServiceContext()[pri:0, instance:tests.ReadDataServiceTest@5ce8d869]" started-at="2025-10-03T15:21:40 IST" name="tearDownRealServiceContext" finished-at="2025-10-03T15:21:40 IST" duration-ms="282" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownRealServiceContext -->
      </class> <!-- tests.ReadDataServiceTest -->
    </test> <!-- Read Data Service Tests -->
    <test started-at="2025-10-03T15:21:39 IST" name="Write Data Service Tests" finished-at="2025-10-03T15:21:40 IST" duration-ms="1299">
      <class name="tests.WriteDataServiceTest">
        <test-method is-config="true" signature="setUpRealServiceContext()[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:39 IST" name="setUpRealServiceContext" finished-at="2025-10-03T15:21:40 IST" duration-ms="438" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpRealServiceContext -->
        <test-method is-config="true" signature="setUpWriteDataTests()[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="setUpWriteDataTests" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpWriteDataTests -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testConcurrentWriteOperations()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testConcurrentWriteOperations()[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="testConcurrentWriteOperations" description="Test concurrent write operations" finished-at="2025-10-03T15:21:40 IST" duration-ms="152" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentWriteOperations -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConcurrentWriteOperations status=SUCCESS method=WriteDataServiceTest.testConcurrentWriteOperations()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteDataServiceHealth()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteDataServiceHealth()[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="testWriteDataServiceHealth" description="Test write data service health" finished-at="2025-10-03T15:21:40 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteDataServiceHealth -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteDataServiceHealth status=SUCCESS method=WriteDataServiceTest.testWriteDataServiceHealth()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeErrorHandling()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeErrorHandling()[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="testWriteNodeErrorHandling" description="Test write node error handling with invalid node" finished-at="2025-10-03T15:21:40 IST" duration-ms="9" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Should return error status for invalid node ID expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Should return error status for invalid node ID expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertTrue(Assert.java:57)
at tests.WriteDataServiceTest.testWriteNodeErrorHandling(WriteDataServiceTest.java:103)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:228)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:961)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:201)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:819)
at org.testng.TestRunner.run(TestRunner.java:619)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:481)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:58)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeErrorHandling -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeErrorHandling status=FAILURE method=WriteDataServiceTest.testWriteNodeErrorHandling()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testWriteNodePerformance()[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="testWriteNodePerformance" description="Test write node performance" finished-at="2025-10-03T15:21:40 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodePerformance -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodePerformance()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodePerformance status=SUCCESS method=WriteDataServiceTest.testWriteNodePerformance()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeValidation()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeValidation()[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="testWriteNodeValidation" description="Test write node validation" finished-at="2025-10-03T15:21:40 IST" duration-ms="65" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeValidation -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeValidation status=SUCCESS method=WriteDataServiceTest.testWriteNodeValidation()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithBoolean()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithBoolean()[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="testWriteNodeWithBoolean" description="Test write node with boolean value" finished-at="2025-10-03T15:21:40 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithBoolean -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithBoolean status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithBoolean()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="testWriteNodeWithDifferentDataTypes" description="Test write node with different data types" data-provider="writeDataProvider" finished-at="2025-10-03T15:21:40 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s=DataBlocksGlobal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Integer value]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithDifferentDataTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithDifferentDataTypes status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="testWriteNodeWithDifferentDataTypes" description="Test write node with different data types" data-provider="writeDataProvider" finished-at="2025-10-03T15:21:40 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s=DataBlocksGlobal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test String]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[String value]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithDifferentDataTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithDifferentDataTypes status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="testWriteNodeWithDifferentDataTypes" description="Test write node with different data types" data-provider="writeDataProvider" finished-at="2025-10-03T15:21:40 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s=DataBlocksGlobal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Boolean value]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithDifferentDataTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithDifferentDataTypes status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="testWriteNodeWithDifferentDataTypes" description="Test write node with different data types" data-provider="writeDataProvider" finished-at="2025-10-03T15:21:40 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s=DataBlocksGlobal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123.45]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Double value]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithDifferentDataTypes -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithDifferentDataTypes status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="testWriteNodeWithDifferentDataTypes" description="Test write node with different data types" data-provider="writeDataProvider" finished-at="2025-10-03T15:21:40 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=0;i=2253]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Numeric node ID with integer]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithDifferentDataTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithDifferentDataTypes status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="testWriteNodeWithDifferentDataTypes" description="Test write node with different data types" data-provider="writeDataProvider" finished-at="2025-10-03T15:21:40 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=2;i=5001]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Another Test]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Another numeric node ID with string]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithDifferentDataTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithDifferentDataTypes status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="testWriteNodeWithDifferentDataTypes" description="Test write node with different data types" data-provider="writeDataProvider" finished-at="2025-10-03T15:21:40 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=999;s=InvalidNode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Invalid node ID]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithDifferentDataTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithDifferentDataTypes status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="testWriteNodeWithDifferentDataTypes" description="Test write node with different data types" data-provider="writeDataProvider" finished-at="2025-10-03T15:21:40 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Empty node ID]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithDifferentDataTypes -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithDifferentDataTypes status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="testWriteNodeWithDifferentDataTypes" description="Test write node with different data types" data-provider="writeDataProvider" finished-at="2025-10-03T15:21:40 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s=DataBlocksGlobal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Empty string value]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithDifferentDataTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithDifferentDataTypes status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithDouble()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithDouble()[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="testWriteNodeWithDouble" description="Test write node with double value" finished-at="2025-10-03T15:21:40 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithDouble -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithDouble status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithDouble()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithInteger()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithInteger()[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="testWriteNodeWithInteger" description="Test write node with integer value" finished-at="2025-10-03T15:21:40 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithInteger -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithInteger status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithInteger()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithLargeData()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithLargeData()[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="testWriteNodeWithLargeData" description="Test write node with large data" finished-at="2025-10-03T15:21:40 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithLargeData -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithLargeData status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithLargeData()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithNullValue()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithNullValue()[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="testWriteNodeWithNullValue" description="Test write node with null value" finished-at="2025-10-03T15:21:40 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithNullValue -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithNullValue status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithNullValue()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="setUpTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithString()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithString()[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="testWriteNodeWithString" description="Test write node with string value" finished-at="2025-10-03T15:21:40 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithString -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="tearDownTest" finished-at="2025-10-03T15:21:40 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithString status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithString()[pri:0, instance:tests.WriteDataServiceTest@8c3619e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="tearDownRealServiceContext()[pri:0, instance:tests.WriteDataServiceTest@8c3619e]" started-at="2025-10-03T15:21:40 IST" name="tearDownRealServiceContext" finished-at="2025-10-03T15:21:40 IST" duration-ms="228" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownRealServiceContext -->
      </class> <!-- tests.WriteDataServiceTest -->
    </test> <!-- Write Data Service Tests -->
    <test started-at="2025-10-03T15:21:41 IST" name="Legacy API Tests (Mock Server)" finished-at="2025-10-03T15:21:41 IST" duration-ms="129">
      <class name="tests.ApiTestExecutor">
        <test-method is-config="true" signature="setUpApiContext()[pri:0, instance:tests.ApiTestExecutor@68b32e3e]" started-at="2025-10-03T15:21:30 IST" name="setUpApiContext" finished-at="2025-10-03T15:21:39 IST" duration-ms="9345" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpApiContext -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.ApiTestExecutor@68b32e3e]" started-at="2025-10-03T15:21:41 IST" name="setup" finished-at="2025-10-03T15:21:41 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testBrowseTags()[pri:0, instance:tests.ApiTestExecutor@68b32e3e]" started-at="2025-10-03T15:21:41 IST" name="testBrowseTags" finished-at="2025-10-03T15:21:41 IST" duration-ms="21" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBrowseTags -->
        <test-method signature="testConvertDataValue()[pri:0, instance:tests.ApiTestExecutor@68b32e3e]" started-at="2025-10-03T15:21:41 IST" name="testConvertDataValue" finished-at="2025-10-03T15:21:41 IST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertDataValue -->
        <test-method signature="testConvertValue()[pri:0, instance:tests.ApiTestExecutor@68b32e3e]" started-at="2025-10-03T15:21:41 IST" name="testConvertValue" finished-at="2025-10-03T15:21:41 IST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertValue -->
        <test-method signature="testKafkaHasChanged()[pri:0, instance:tests.ApiTestExecutor@68b32e3e]" started-at="2025-10-03T15:21:41 IST" name="testKafkaHasChanged" finished-at="2025-10-03T15:21:41 IST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testKafkaHasChanged -->
        <test-method signature="testKafkaProcessBrowseData()[pri:0, instance:tests.ApiTestExecutor@68b32e3e]" started-at="2025-10-03T15:21:41 IST" name="testKafkaProcessBrowseData" finished-at="2025-10-03T15:21:41 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testKafkaProcessBrowseData -->
        <test-method signature="testOpcConnect()[pri:0, instance:tests.ApiTestExecutor@68b32e3e]" started-at="2025-10-03T15:21:41 IST" name="testOpcConnect" finished-at="2025-10-03T15:21:41 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcConnect -->
        <test-method signature="testOpcConnectionStatus()[pri:0, instance:tests.ApiTestExecutor@68b32e3e]" started-at="2025-10-03T15:21:41 IST" name="testOpcConnectionStatus" finished-at="2025-10-03T15:21:41 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcConnectionStatus -->
        <test-method signature="testOpcInit()[pri:0, instance:tests.ApiTestExecutor@68b32e3e]" started-at="2025-10-03T15:21:41 IST" name="testOpcInit" finished-at="2025-10-03T15:21:41 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcInit -->
        <test-method signature="testReadNode()[pri:0, instance:tests.ApiTestExecutor@68b32e3e]" started-at="2025-10-03T15:21:41 IST" name="testReadNode" finished-at="2025-10-03T15:21:41 IST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadNode -->
        <test-method signature="testReadNode2()[pri:0, instance:tests.ApiTestExecutor@68b32e3e]" started-at="2025-10-03T15:21:41 IST" name="testReadNode2" finished-at="2025-10-03T15:21:41 IST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadNode2 -->
        <test-method signature="testReadValue()[pri:0, instance:tests.ApiTestExecutor@68b32e3e]" started-at="2025-10-03T15:21:41 IST" name="testReadValue" finished-at="2025-10-03T15:21:41 IST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadValue -->
        <test-method signature="testSubscribeToData()[pri:0, instance:tests.ApiTestExecutor@68b32e3e]" started-at="2025-10-03T15:21:41 IST" name="testSubscribeToData" finished-at="2025-10-03T15:21:41 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubscribeToData -->
        <test-method signature="testWriteNode()[pri:0, instance:tests.ApiTestExecutor@68b32e3e]" started-at="2025-10-03T15:21:41 IST" name="testWriteNode" finished-at="2025-10-03T15:21:41 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNode -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:tests.ApiTestExecutor@68b32e3e]" started-at="2025-10-03T15:21:41 IST" name="teardown" finished-at="2025-10-03T15:21:41 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="tearDownApiContext()[pri:0, instance:tests.ApiTestExecutor@68b32e3e]" started-at="2025-10-03T15:21:41 IST" name="tearDownApiContext" finished-at="2025-10-03T15:21:41 IST" duration-ms="41" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownApiContext -->
      </class> <!-- tests.ApiTestExecutor -->
    </test> <!-- Legacy API Tests (Mock Server) -->
    <test started-at="2025-10-03T15:21:41 IST" name="Kafka Service Tests" finished-at="2025-10-03T15:21:41 IST" duration-ms="721">
      <class name="tests.KafkaServiceTest">
        <test-method is-config="true" signature="setUpRealServiceContext()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpRealServiceContext" finished-at="2025-10-03T15:21:41 IST" duration-ms="494" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpRealServiceContext -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testConcurrentKafkaOperations()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="setUpKafkaTests()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpKafkaTests" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpKafkaTests -->
        <test-method signature="testConcurrentKafkaOperations()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testConcurrentKafkaOperations" description="Test concurrent Kafka operations" finished-at="2025-10-03T15:21:41 IST" duration-ms="21" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentKafkaOperations -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConcurrentKafkaOperations status=SUCCESS method=KafkaServiceTest.testConcurrentKafkaOperations()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testConvertDataValue()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testConvertDataValue()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testConvertDataValue" description="Test convert data value endpoint" finished-at="2025-10-03T15:21:41 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertDataValue -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConvertDataValue status=SUCCESS method=KafkaServiceTest.testConvertDataValue()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testConvertValue()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testConvertValue()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testConvertValue" description="Test convert value endpoint" finished-at="2025-10-03T15:21:41 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertValue -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConvertValue status=SUCCESS method=KafkaServiceTest.testConvertValue()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testConvertValueWithDifferentTypes" description="Test convert value with different data types" data-provider="convertValueProvider" finished-at="2025-10-03T15:21:41 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Integer string]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertValueWithDifferentTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConvertValueWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testConvertValueWithDifferentTypes" description="Test convert value with different data types" data-provider="convertValueProvider" finished-at="2025-10-03T15:21:41 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[123.45]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Double string]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertValueWithDifferentTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConvertValueWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testConvertValueWithDifferentTypes" description="Test convert value with different data types" data-provider="convertValueProvider" finished-at="2025-10-03T15:21:41 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Boolean string]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertValueWithDifferentTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConvertValueWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testConvertValueWithDifferentTypes" description="Test convert value with different data types" data-provider="convertValueProvider" finished-at="2025-10-03T15:21:41 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Boolean string]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertValueWithDifferentTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConvertValueWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testConvertValueWithDifferentTypes" description="Test convert value with different data types" data-provider="convertValueProvider" finished-at="2025-10-03T15:21:41 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[test]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[String value]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertValueWithDifferentTypes -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConvertValueWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testConvertValueWithDifferentTypes" description="Test convert value with different data types" data-provider="convertValueProvider" finished-at="2025-10-03T15:21:41 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Empty string]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertValueWithDifferentTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConvertValueWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testConvertValueWithDifferentTypes" description="Test convert value with different data types" data-provider="convertValueProvider" finished-at="2025-10-03T15:21:41 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[null]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Null string]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertValueWithDifferentTypes -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConvertValueWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testHasChanged()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testHasChanged()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testHasChanged" description="Test has changed endpoint with different values" finished-at="2025-10-03T15:21:41 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHasChanged -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testHasChanged status=SUCCESS method=KafkaServiceTest.testHasChanged()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testHasChangedWithIdenticalData()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testHasChangedWithIdenticalData()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testHasChangedWithIdenticalData" description="Test has changed with identical data" finished-at="2025-10-03T15:21:41 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHasChangedWithIdenticalData -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testHasChangedWithIdenticalData status=SUCCESS method=KafkaServiceTest.testHasChangedWithIdenticalData()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testHasChangedWithNullValues()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testHasChangedWithNullValues" description="Test has changed with null values" finished-at="2025-10-03T15:21:41 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHasChangedWithNullValues -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testHasChangedWithNullValues()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testHasChangedWithNullValues status=SUCCESS method=KafkaServiceTest.testHasChangedWithNullValues()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testKafkaErrorHandling()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testKafkaErrorHandling()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testKafkaErrorHandling" description="Test Kafka error handling" finished-at="2025-10-03T15:21:41 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testKafkaErrorHandling -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testKafkaErrorHandling status=SUCCESS method=KafkaServiceTest.testKafkaErrorHandling()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testKafkaLargeMessageHandling()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testKafkaLargeMessageHandling()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testKafkaLargeMessageHandling" description="Test Kafka large message handling" finished-at="2025-10-03T15:21:41 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testKafkaLargeMessageHandling -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testKafkaLargeMessageHandling status=SUCCESS method=KafkaServiceTest.testKafkaLargeMessageHandling()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testKafkaMessageProcessingPerformance()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testKafkaMessageProcessingPerformance" description="Test Kafka message processing performance" finished-at="2025-10-03T15:21:41 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testKafkaMessageProcessingPerformance -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testKafkaMessageProcessingPerformance()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testKafkaMessageProcessingPerformance status=SUCCESS method=KafkaServiceTest.testKafkaMessageProcessingPerformance()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testKafkaMessageValidation()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testKafkaMessageValidation()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testKafkaMessageValidation" description="Test Kafka message validation" finished-at="2025-10-03T15:21:41 IST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testKafkaMessageValidation -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testKafkaMessageValidation status=SUCCESS method=KafkaServiceTest.testKafkaMessageValidation()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testKafkaServiceHealth()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testKafkaServiceHealth()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testKafkaServiceHealth" description="Test Kafka service health" finished-at="2025-10-03T15:21:41 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testKafkaServiceHealth -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testKafkaServiceHealth status=SUCCESS method=KafkaServiceTest.testKafkaServiceHealth()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testProcessBrowseData()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testProcessBrowseData" description="Test process browse data endpoint" finished-at="2025-10-03T15:21:41 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessBrowseData -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testProcessBrowseData()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testProcessBrowseData status=SUCCESS method=KafkaServiceTest.testProcessBrowseData()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testProcessBrowseDataWithDifferentTypes" description="Test process browse data with different data types" data-provider="browseDataProvider" finished-at="2025-10-03T15:21:41 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s=DataBlocksGlobal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{tag=Tag1, value=123, timestamp=1759485101702}]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Integer value]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessBrowseDataWithDifferentTypes -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testProcessBrowseDataWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testProcessBrowseDataWithDifferentTypes" description="Test process browse data with different data types" data-provider="browseDataProvider" finished-at="2025-10-03T15:21:41 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s=DataBlocksGlobal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{tag=Tag2, value=String Value, timestamp=1759485101702}]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[String value]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessBrowseDataWithDifferentTypes -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testProcessBrowseDataWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testProcessBrowseDataWithDifferentTypes" description="Test process browse data with different data types" data-provider="browseDataProvider" finished-at="2025-10-03T15:21:41 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s=DataBlocksGlobal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{tag=Tag3, value=true, timestamp=1759485101702}]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Boolean value]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessBrowseDataWithDifferentTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testProcessBrowseDataWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testProcessBrowseDataWithDifferentTypes" description="Test process browse data with different data types" data-provider="browseDataProvider" finished-at="2025-10-03T15:21:41 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s=DataBlocksGlobal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{tag=Tag4, value=123.45, timestamp=1759485101702}]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Double value]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessBrowseDataWithDifferentTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testProcessBrowseDataWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testProcessBrowseDataWithDifferentTypes" description="Test process browse data with different data types" data-provider="browseDataProvider" finished-at="2025-10-03T15:21:41 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=0;i=2253]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{tag=Tag5, value=42, timestamp=1759485101702}]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Numeric node ID]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessBrowseDataWithDifferentTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testProcessBrowseDataWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="testProcessBrowseDataWithDifferentTypes" description="Test process browse data with different data types" data-provider="browseDataProvider" finished-at="2025-10-03T15:21:41 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=2;i=5001]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{tag=Tag6, value=Another String, timestamp=1759485101702}]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Another numeric node ID]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessBrowseDataWithDifferentTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testProcessBrowseDataWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@6dab9b6d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="tearDownRealServiceContext()[pri:0, instance:tests.KafkaServiceTest@6dab9b6d]" started-at="2025-10-03T15:21:41 IST" name="tearDownRealServiceContext" finished-at="2025-10-03T15:21:41 IST" duration-ms="32" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownRealServiceContext -->
      </class> <!-- tests.KafkaServiceTest -->
    </test> <!-- Kafka Service Tests -->
    <test started-at="2025-10-03T15:21:41 IST" name="Integration Tests" finished-at="2025-10-03T15:21:41 IST" duration-ms="759">
      <class name="tests.IntegrationTest">
        <test-method is-config="true" signature="setUpRealServiceContext()[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="setUpRealServiceContext" finished-at="2025-10-03T15:21:41 IST" duration-ms="499" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpRealServiceContext -->
        <test-method signature="testCompleteDataFlow()[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="testCompleteDataFlow" description="Test complete data flow from OPC UA to Kafka" finished-at="2025-10-03T15:21:41 IST" duration-ms="28" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCompleteDataFlow -->
        <test-method is-config="true" signature="setUpIntegrationTests()[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="setUpIntegrationTests" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpIntegrationTests -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=IntegrationTest.testCompleteDataFlow()[pri:0, instance:tests.IntegrationTest@72437d8d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCompleteDataFlow status=SUCCESS method=IntegrationTest.testCompleteDataFlow()[pri:0, instance:tests.IntegrationTest@72437d8d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testConcurrentOperationsAcrossServices()[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="testConcurrentOperationsAcrossServices" description="Test concurrent operations across services" finished-at="2025-10-03T15:21:41 IST" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentOperationsAcrossServices -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=IntegrationTest.testConcurrentOperationsAcrossServices()[pri:0, instance:tests.IntegrationTest@72437d8d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConcurrentOperationsAcrossServices status=SUCCESS method=IntegrationTest.testConcurrentOperationsAcrossServices()[pri:0, instance:tests.IntegrationTest@72437d8d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=IntegrationTest.testDataConsistencyAcrossServices()[pri:0, instance:tests.IntegrationTest@72437d8d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testDataConsistencyAcrossServices()[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="testDataConsistencyAcrossServices" description="Test data consistency across services" finished-at="2025-10-03T15:21:41 IST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataConsistencyAcrossServices -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testDataConsistencyAcrossServices status=SUCCESS method=IntegrationTest.testDataConsistencyAcrossServices()[pri:0, instance:tests.IntegrationTest@72437d8d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=IntegrationTest.testErrorPropagationAcrossServices()[pri:0, instance:tests.IntegrationTest@72437d8d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testErrorPropagationAcrossServices()[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="testErrorPropagationAcrossServices" description="Test error propagation across services" finished-at="2025-10-03T15:21:41 IST" duration-ms="3" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Should return error for invalid node expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Should return error for invalid node expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:111)
at org.testng.Assert.failNotEquals(Assert.java:1578)
at org.testng.Assert.assertTrue(Assert.java:57)
at tests.IntegrationTest.testErrorPropagationAcrossServices(IntegrationTest.java:177)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:228)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:63)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:961)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:201)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:819)
at org.testng.TestRunner.run(TestRunner.java:619)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:481)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:58)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testErrorPropagationAcrossServices -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testErrorPropagationAcrossServices status=FAILURE method=IntegrationTest.testErrorPropagationAcrossServices()[pri:0, instance:tests.IntegrationTest@72437d8d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=IntegrationTest.testPerformanceUnderLoad()[pri:0, instance:tests.IntegrationTest@72437d8d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testPerformanceUnderLoad()[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="testPerformanceUnderLoad" description="Test performance under load" finished-at="2025-10-03T15:21:41 IST" duration-ms="53" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPerformanceUnderLoad -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testPerformanceUnderLoad status=SUCCESS method=IntegrationTest.testPerformanceUnderLoad()[pri:0, instance:tests.IntegrationTest@72437d8d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=IntegrationTest.testReadWriteCycle()[pri:0, instance:tests.IntegrationTest@72437d8d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadWriteCycle()[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="testReadWriteCycle" description="Test read-write cycle" finished-at="2025-10-03T15:21:41 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadWriteCycle -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadWriteCycle status=SUCCESS method=IntegrationTest.testReadWriteCycle()[pri:0, instance:tests.IntegrationTest@72437d8d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testServiceDiscovery()[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="testServiceDiscovery" description="Test service discovery and health check" finished-at="2025-10-03T15:21:41 IST" duration-ms="88" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testServiceDiscovery -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=IntegrationTest.testServiceDiscovery()[pri:0, instance:tests.IntegrationTest@72437d8d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testServiceDiscovery status=SUCCESS method=IntegrationTest.testServiceDiscovery()[pri:0, instance:tests.IntegrationTest@72437d8d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testServiceRecoveryAfterFailure()[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="testServiceRecoveryAfterFailure" description="Test service recovery after failure" finished-at="2025-10-03T15:21:41 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testServiceRecoveryAfterFailure -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="setUpTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=IntegrationTest.testServiceRecoveryAfterFailure()[pri:0, instance:tests.IntegrationTest@72437d8d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="tearDownTest" finished-at="2025-10-03T15:21:41 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testServiceRecoveryAfterFailure status=SUCCESS method=IntegrationTest.testServiceRecoveryAfterFailure()[pri:0, instance:tests.IntegrationTest@72437d8d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="tearDownRealServiceContext()[pri:0, instance:tests.IntegrationTest@72437d8d]" started-at="2025-10-03T15:21:41 IST" name="tearDownRealServiceContext" finished-at="2025-10-03T15:21:41 IST" duration-ms="33" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownRealServiceContext -->
      </class> <!-- tests.IntegrationTest -->
    </test> <!-- Integration Tests -->
  </suite> <!-- Microservices API Test Suite -->
</testng-results>
