<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="91" passed="67" failed="24" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2025-10-10T14:44:51 IST" name="Microservices API Test Suite" finished-at="2025-10-10T14:44:59 IST" duration-ms="8192">
    <groups>
    </groups>
    <test started-at="2025-10-10T14:44:51 IST" name="OPC UA Connection Service Tests" finished-at="2025-10-10T14:44:52 IST" duration-ms="1042">
      <class name="tests.OpUaConnectionServiceTest">
        <test-method is-config="true" signature="setUpRealServiceContext()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:51 IST" name="setUpRealServiceContext" finished-at="2025-10-10T14:44:51 IST" duration-ms="452" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpRealServiceContext -->
        <test-method is-config="true" signature="setUpOpUaTests()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:51 IST" name="setUpOpUaTests" finished-at="2025-10-10T14:44:51 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpOpUaTests -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:51 IST" name="setUpTest" finished-at="2025-10-10T14:44:51 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=OpUaConnectionServiceTest.testOpcUaConnectionConnect()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testOpcUaConnectionConnect()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:51 IST" name="testOpcUaConnectionConnect" description="Test OPC UA connection establishment" finished-at="2025-10-10T14:44:51 IST" duration-ms="114" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcUaConnectionConnect -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:51 IST" name="tearDownTest" finished-at="2025-10-10T14:44:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testOpcUaConnectionConnect status=SUCCESS method=OpUaConnectionServiceTest.testOpcUaConnectionConnect()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:51 IST" name="setUpTest" finished-at="2025-10-10T14:44:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=OpUaConnectionServiceTest.testOpcUaConnectionErrorHandling()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testOpcUaConnectionErrorHandling()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:51 IST" name="testOpcUaConnectionErrorHandling" description="Test OPC UA connection error handling" finished-at="2025-10-10T14:44:51 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcUaConnectionErrorHandling -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:51 IST" name="tearDownTest" finished-at="2025-10-10T14:44:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testOpcUaConnectionErrorHandling status=SUCCESS method=OpUaConnectionServiceTest.testOpcUaConnectionErrorHandling()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:51 IST" name="setUpTest" finished-at="2025-10-10T14:44:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=OpUaConnectionServiceTest.testOpcUaConnectionInit()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testOpcUaConnectionInit()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:51 IST" name="testOpcUaConnectionInit" description="Test OPC UA connection initialization" finished-at="2025-10-10T14:44:51 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcUaConnectionInit -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:51 IST" name="tearDownTest" finished-at="2025-10-10T14:44:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testOpcUaConnectionInit status=SUCCESS method=OpUaConnectionServiceTest.testOpcUaConnectionInit()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:51 IST" name="setUpTest" finished-at="2025-10-10T14:44:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=OpUaConnectionServiceTest.testOpcUaConnectionPerformance()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testOpcUaConnectionPerformance()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:51 IST" name="testOpcUaConnectionPerformance" description="Test OPC UA connection performance" finished-at="2025-10-10T14:44:52 IST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcUaConnectionPerformance -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testOpcUaConnectionPerformance status=SUCCESS method=OpUaConnectionServiceTest.testOpcUaConnectionPerformance()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testOpcUaConnectionRetry()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:52 IST" name="testOpcUaConnectionRetry" description="Test OPC UA connection retry mechanism" finished-at="2025-10-10T14:44:52 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcUaConnectionRetry -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=OpUaConnectionServiceTest.testOpcUaConnectionRetry()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testOpcUaConnectionRetry status=SUCCESS method=OpUaConnectionServiceTest.testOpcUaConnectionRetry()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=OpUaConnectionServiceTest.testOpcUaConnectionSequence()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testOpcUaConnectionSequence()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:52 IST" name="testOpcUaConnectionSequence" description="Test OPC UA connection sequence" finished-at="2025-10-10T14:44:52 IST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcUaConnectionSequence -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testOpcUaConnectionSequence status=SUCCESS method=OpUaConnectionServiceTest.testOpcUaConnectionSequence()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=OpUaConnectionServiceTest.testOpcUaConnectionStatus()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testOpcUaConnectionStatus()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:52 IST" name="testOpcUaConnectionStatus" description="Test OPC UA connection status endpoint" finished-at="2025-10-10T14:44:52 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcUaConnectionStatus -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testOpcUaConnectionStatus status=SUCCESS method=OpUaConnectionServiceTest.testOpcUaConnectionStatus()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=OpUaConnectionServiceTest.testOpcUaServiceHealth()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testOpcUaServiceHealth()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:52 IST" name="testOpcUaServiceHealth" description="Test OPC UA service health check" finished-at="2025-10-10T14:44:52 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcUaServiceHealth -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testOpcUaServiceHealth status=SUCCESS method=OpUaConnectionServiceTest.testOpcUaServiceHealth()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="tearDownRealServiceContext()[pri:0, instance:tests.OpUaConnectionServiceTest@7e242b4d]" started-at="2025-10-10T14:44:52 IST" name="tearDownRealServiceContext" finished-at="2025-10-10T14:44:52 IST" duration-ms="208" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownRealServiceContext -->
      </class> <!-- tests.OpUaConnectionServiceTest -->
    </test> <!-- OPC UA Connection Service Tests -->
    <test started-at="2025-10-10T14:44:51 IST" name="Read Data Service Tests" finished-at="2025-10-10T14:44:53 IST" duration-ms="1840">
      <class name="tests.ReadDataServiceTest">
        <test-method is-config="true" signature="setUpRealServiceContext()[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:51 IST" name="setUpRealServiceContext" finished-at="2025-10-10T14:44:51 IST" duration-ms="451" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpRealServiceContext -->
        <test-method is-config="true" signature="setUpReadDataTests()[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:51 IST" name="setUpReadDataTests" finished-at="2025-10-10T14:44:51 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpReadDataTests -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:51 IST" name="setUpTest" finished-at="2025-10-10T14:44:51 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testBrowseTags()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testBrowseTags()[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:51 IST" name="testBrowseTags" description="Test browse tags endpoint" finished-at="2025-10-10T14:44:51 IST" duration-ms="114" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBrowseTags -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:51 IST" name="tearDownTest" finished-at="2025-10-10T14:44:51 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testBrowseTags status=SUCCESS method=ReadDataServiceTest.testBrowseTags()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:51 IST" name="setUpTest" finished-at="2025-10-10T14:44:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testBrowseTagsWithDefaultNode()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testBrowseTagsWithDefaultNode()[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:51 IST" name="testBrowseTagsWithDefaultNode" description="Test browse tags with default node" finished-at="2025-10-10T14:44:51 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBrowseTagsWithDefaultNode -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:51 IST" name="tearDownTest" finished-at="2025-10-10T14:44:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testBrowseTagsWithDefaultNode status=SUCCESS method=ReadDataServiceTest.testBrowseTagsWithDefaultNode()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:51 IST" name="setUpTest" finished-at="2025-10-10T14:44:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testConcurrentReadOperations()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testConcurrentReadOperations()[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:51 IST" name="testConcurrentReadOperations" description="Test concurrent read operations" finished-at="2025-10-10T14:44:52 IST" duration-ms="35" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentReadOperations -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadDataErrorHandling()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConcurrentReadOperations status=SUCCESS method=ReadDataServiceTest.testConcurrentReadOperations()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testReadDataErrorHandling()[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="testReadDataErrorHandling" description="Test read data error handling" finished-at="2025-10-10T14:44:52 IST" duration-ms="4" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Should return error status for invalid node ID expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Should return error status for invalid node ID expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at tests.ReadDataServiceTest.testReadDataErrorHandling(ReadDataServiceTest.java:144)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadDataErrorHandling -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadDataErrorHandling status=FAILURE method=ReadDataServiceTest.testReadDataErrorHandling()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadDataPerformance()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadDataPerformance()[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="testReadDataPerformance" description="Test read data performance under load" finished-at="2025-10-10T14:44:52 IST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadDataPerformance -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadDataPerformance status=SUCCESS method=ReadDataServiceTest.testReadDataPerformance()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="168" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadDataServiceHealth()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadDataServiceHealth()[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="testReadDataServiceHealth" description="Test read data service health" finished-at="2025-10-10T14:44:52 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadDataServiceHealth -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadDataServiceHealth status=SUCCESS method=ReadDataServiceTest.testReadDataServiceHealth()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadNode()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadNode()[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="testReadNode" description="Test read node endpoint" finished-at="2025-10-10T14:44:52 IST" duration-ms="4" status="FAIL">
          <exception class="com.microsoft.playwright.PlaywrightException">
            <message>
              <![CDATA[Error {
  message='socket hang up
  name='Error
  stack='Error: socket hang up
    at Socket.socketOnEnd (node:_http_client:530:25)
    at Socket.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/read-node?nodeId=ns=3;s=DataBlocksGlobal
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.microsoft.playwright.PlaywrightException: Error {
  message='socket hang up
  name='Error
  stack='Error: socket hang up
    at Socket.socketOnEnd (node:_http_client:530:25)
    at Socket.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/read-node?nodeId=ns=3;s=DataBlocksGlobal
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.WaitableResult.get(WaitableResult.java:56)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:132)
at com.microsoft.playwright.impl.Connection.sendMessage(Connection.java:130)
at com.microsoft.playwright.impl.ChannelOwner.sendMessage(ChannelOwner.java:118)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetchImpl(APIRequestContextImpl.java:156)
at com.microsoft.playwright.impl.APIRequestContextImpl.lambda$fetch$1(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.LoggingSupport.withLogging(LoggingSupport.java:47)
at com.microsoft.playwright.impl.ChannelOwner.withLogging(ChannelOwner.java:97)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetch(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.APIRequestContextImpl.get(APIRequestContextImpl.java:197)
at com.microsoft.playwright.APIRequestContext.get(APIRequestContext.java:281)
at base.RealServiceTestBase.readNode(RealServiceTestBase.java:365)
at tests.ReadDataServiceTest.testReadNode(ReadDataServiceTest.java:87)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.microsoft.playwright.impl.DriverException: Error {
  message='socket hang up
  name='Error
  stack='Error: socket hang up
    at Socket.socketOnEnd (node:_http_client:530:25)
    at Socket.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/read-node?nodeId=ns=3;s=DataBlocksGlobal
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.Connection.dispatch(Connection.java:259)
at com.microsoft.playwright.impl.Connection.processOneMessage(Connection.java:211)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:130)
... 34 more
]]>
            </full-stacktrace>
          </exception> <!-- com.microsoft.playwright.PlaywrightException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadNode -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadNode status=FAILURE method=ReadDataServiceTest.testReadNode()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadNode2()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadNode2()[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="testReadNode2" description="Test read node2 endpoint" finished-at="2025-10-10T14:44:52 IST" duration-ms="310" status="FAIL">
          <exception class="com.microsoft.playwright.PlaywrightException">
            <message>
              <![CDATA[Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/read-node2?nodeId=MCOM
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.microsoft.playwright.PlaywrightException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/read-node2?nodeId=MCOM
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.WaitableResult.get(WaitableResult.java:56)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:132)
at com.microsoft.playwright.impl.Connection.sendMessage(Connection.java:130)
at com.microsoft.playwright.impl.ChannelOwner.sendMessage(ChannelOwner.java:118)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetchImpl(APIRequestContextImpl.java:156)
at com.microsoft.playwright.impl.APIRequestContextImpl.lambda$fetch$1(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.LoggingSupport.withLogging(LoggingSupport.java:47)
at com.microsoft.playwright.impl.ChannelOwner.withLogging(ChannelOwner.java:97)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetch(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.APIRequestContextImpl.get(APIRequestContextImpl.java:197)
at com.microsoft.playwright.APIRequestContext.get(APIRequestContext.java:281)
at base.RealServiceTestBase.readNode2(RealServiceTestBase.java:373)
at tests.ReadDataServiceTest.testReadNode2(ReadDataServiceTest.java:99)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.microsoft.playwright.impl.DriverException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/read-node2?nodeId=MCOM
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.Connection.dispatch(Connection.java:259)
at com.microsoft.playwright.impl.Connection.processOneMessage(Connection.java:211)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:130)
... 34 more
]]>
            </full-stacktrace>
          </exception> <!-- com.microsoft.playwright.PlaywrightException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadNode2 -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadNode2 status=FAILURE method=ReadDataServiceTest.testReadNode2()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadTagValuesSimplified()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadTagValuesSimplified()[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="testReadTagValuesSimplified" description="Test read tag values simplified" finished-at="2025-10-10T14:44:52 IST" duration-ms="352" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Expected status 200 but got 404 expected [200] but found [404]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Expected status 200 but got 404 expected [200] but found [404]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:907)
at base.RealServiceTestBase.verifyResponseStatus(RealServiceTestBase.java:138)
at tests.ReadDataServiceTest.testReadTagValuesSimplified(ReadDataServiceTest.java:113)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadTagValuesSimplified -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadTagValuesSimplified status=FAILURE method=ReadDataServiceTest.testReadTagValuesSimplified()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadValue()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadValue()[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="testReadValue" description="Test read value endpoint" finished-at="2025-10-10T14:44:52 IST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadValue -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadValue status=SUCCESS method=ReadDataServiceTest.testReadValue()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="testReadValueWithDifferentNodes" description="Test read value with different node IDs" data-provider="nodeIdProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s="PLC_To_WMS"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[PLC to WMS communication node]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadValueWithDifferentNodes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadValueWithDifferentNodes status=SUCCESS method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="testReadValueWithDifferentNodes" description="Test read value with different node IDs" data-provider="nodeIdProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s="WMS_To_PLC"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[WMS to PLC communication node]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadValueWithDifferentNodes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadValueWithDifferentNodes status=SUCCESS method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="testReadValueWithDifferentNodes" description="Test read value with different node IDs" data-provider="nodeIdProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s=DataBlocksGlobal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Global data blocks node]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadValueWithDifferentNodes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadValueWithDifferentNodes status=SUCCESS method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="testReadValueWithDifferentNodes" description="Test read value with different node IDs" data-provider="nodeIdProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=0;i=2253]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Numeric node ID]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadValueWithDifferentNodes -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadValueWithDifferentNodes status=SUCCESS method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="testReadValueWithDifferentNodes" description="Test read value with different node IDs" data-provider="nodeIdProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=2;i=5001]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Another numeric node ID]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadValueWithDifferentNodes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadValueWithDifferentNodes status=SUCCESS method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="testReadValueWithDifferentNodes" description="Test read value with different node IDs" data-provider="nodeIdProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[MCOM]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Communication node]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadValueWithDifferentNodes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadValueWithDifferentNodes status=SUCCESS method=ReadDataServiceTest.testReadValueWithDifferentNodes(java.lang.String,java.lang.String)[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=ReadDataServiceTest.testSubscribeToData()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testSubscribeToData()[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="testSubscribeToData" description="Test subscribe to data endpoint" finished-at="2025-10-10T14:44:52 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubscribeToData -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testSubscribeToData status=SUCCESS method=ReadDataServiceTest.testSubscribeToData()[pri:0, instance:tests.ReadDataServiceTest@4204541c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="tearDownRealServiceContext()[pri:0, instance:tests.ReadDataServiceTest@4204541c]" started-at="2025-10-10T14:44:52 IST" name="tearDownRealServiceContext" finished-at="2025-10-10T14:44:53 IST" duration-ms="50" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownRealServiceContext -->
      </class> <!-- tests.ReadDataServiceTest -->
    </test> <!-- Read Data Service Tests -->
    <test started-at="2025-10-10T14:44:51 IST" name="Write Data Service Tests" finished-at="2025-10-10T14:44:53 IST" duration-ms="1849">
      <class name="tests.WriteDataServiceTest">
        <test-method is-config="true" signature="setUpRealServiceContext()[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:51 IST" name="setUpRealServiceContext" finished-at="2025-10-10T14:44:51 IST" duration-ms="451" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpRealServiceContext -->
        <test-method is-config="true" signature="setUpWriteDataTests()[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:51 IST" name="setUpWriteDataTests" finished-at="2025-10-10T14:44:51 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpWriteDataTests -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:51 IST" name="setUpTest" finished-at="2025-10-10T14:44:51 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testConcurrentWriteOperations()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testConcurrentWriteOperations()[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:51 IST" name="testConcurrentWriteOperations" description="Test concurrent write operations" finished-at="2025-10-10T14:44:51 IST" duration-ms="110" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentWriteOperations -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:51 IST" name="tearDownTest" finished-at="2025-10-10T14:44:51 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConcurrentWriteOperations status=SUCCESS method=WriteDataServiceTest.testConcurrentWriteOperations()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:51 IST" name="setUpTest" finished-at="2025-10-10T14:44:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteDataServiceHealth()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteDataServiceHealth()[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:51 IST" name="testWriteDataServiceHealth" description="Test write data service health" finished-at="2025-10-10T14:44:51 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteDataServiceHealth -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:51 IST" name="tearDownTest" finished-at="2025-10-10T14:44:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteDataServiceHealth status=SUCCESS method=WriteDataServiceTest.testWriteDataServiceHealth()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:51 IST" name="setUpTest" finished-at="2025-10-10T14:44:51 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeErrorHandling()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeErrorHandling()[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:51 IST" name="testWriteNodeErrorHandling" description="Test write node error handling with invalid node" finished-at="2025-10-10T14:44:51 IST" duration-ms="5" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Should return error status for invalid node ID expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Should return error status for invalid node ID expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at tests.WriteDataServiceTest.testWriteNodeErrorHandling(WriteDataServiceTest.java:103)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeErrorHandling -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeErrorHandling status=FAILURE method=WriteDataServiceTest.testWriteNodeErrorHandling()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodePerformance()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodePerformance()[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="testWriteNodePerformance" description="Test write node performance" finished-at="2025-10-10T14:44:52 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodePerformance -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeValidation()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodePerformance status=SUCCESS method=WriteDataServiceTest.testWriteNodePerformance()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testWriteNodeValidation()[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="testWriteNodeValidation" description="Test write node validation" finished-at="2025-10-10T14:44:52 IST" duration-ms="66" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeValidation -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeValidation status=SUCCESS method=WriteDataServiceTest.testWriteNodeValidation()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="146" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithBoolean()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithBoolean()[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="testWriteNodeWithBoolean" description="Test write node with boolean value" finished-at="2025-10-10T14:44:52 IST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithBoolean -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithBoolean status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithBoolean()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="testWriteNodeWithDifferentDataTypes" description="Test write node with different data types" data-provider="writeDataProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="5" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s=DataBlocksGlobal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Integer value]]>
              </value>
            </param>
          </params>
          <exception class="com.microsoft.playwright.PlaywrightException">
            <message>
              <![CDATA[Error {
  message='socket hang up
  name='Error
  stack='Error: socket hang up
    at Socket.socketOnEnd (node:_http_client:530:25)
    at Socket.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
}
Call log:
-   - → POST http://localhost:8085/write/api/write/write-node
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
-     - Content-Type: application/json
-     - content-length: 48
]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.microsoft.playwright.PlaywrightException: Error {
  message='socket hang up
  name='Error
  stack='Error: socket hang up
    at Socket.socketOnEnd (node:_http_client:530:25)
    at Socket.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
}
Call log:
-   - → POST http://localhost:8085/write/api/write/write-node
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
-     - Content-Type: application/json
-     - content-length: 48

at com.microsoft.playwright.impl.WaitableResult.get(WaitableResult.java:56)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:132)
at com.microsoft.playwright.impl.Connection.sendMessage(Connection.java:130)
at com.microsoft.playwright.impl.ChannelOwner.sendMessage(ChannelOwner.java:118)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetchImpl(APIRequestContextImpl.java:156)
at com.microsoft.playwright.impl.APIRequestContextImpl.lambda$fetch$1(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.LoggingSupport.withLogging(LoggingSupport.java:47)
at com.microsoft.playwright.impl.ChannelOwner.withLogging(ChannelOwner.java:97)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetch(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.APIRequestContextImpl.post(APIRequestContextImpl.java:212)
at base.RealServiceTestBase.writeNode(RealServiceTestBase.java:390)
at tests.WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(WriteDataServiceTest.java:81)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.microsoft.playwright.impl.DriverException: Error {
  message='socket hang up
  name='Error
  stack='Error: socket hang up
    at Socket.socketOnEnd (node:_http_client:530:25)
    at Socket.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
}
Call log:
-   - → POST http://localhost:8085/write/api/write/write-node
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
-     - Content-Type: application/json
-     - content-length: 48

at com.microsoft.playwright.impl.Connection.dispatch(Connection.java:259)
at com.microsoft.playwright.impl.Connection.processOneMessage(Connection.java:211)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:130)
... 33 more
]]>
            </full-stacktrace>
          </exception> <!-- com.microsoft.playwright.PlaywrightException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithDifferentDataTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithDifferentDataTypes status=FAILURE method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="testWriteNodeWithDifferentDataTypes" description="Test write node with different data types" data-provider="writeDataProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="304" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s=DataBlocksGlobal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Test String]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[String value]]>
              </value>
            </param>
          </params>
          <exception class="com.microsoft.playwright.PlaywrightException">
            <message>
              <![CDATA[Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → POST http://localhost:8085/write/api/write/write-node
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
-     - Content-Type: application/json
-     - content-length: 58
]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.microsoft.playwright.PlaywrightException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → POST http://localhost:8085/write/api/write/write-node
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
-     - Content-Type: application/json
-     - content-length: 58

at com.microsoft.playwright.impl.WaitableResult.get(WaitableResult.java:56)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:132)
at com.microsoft.playwright.impl.Connection.sendMessage(Connection.java:130)
at com.microsoft.playwright.impl.ChannelOwner.sendMessage(ChannelOwner.java:118)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetchImpl(APIRequestContextImpl.java:156)
at com.microsoft.playwright.impl.APIRequestContextImpl.lambda$fetch$1(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.LoggingSupport.withLogging(LoggingSupport.java:47)
at com.microsoft.playwright.impl.ChannelOwner.withLogging(ChannelOwner.java:97)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetch(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.APIRequestContextImpl.post(APIRequestContextImpl.java:212)
at base.RealServiceTestBase.writeNode(RealServiceTestBase.java:390)
at tests.WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(WriteDataServiceTest.java:81)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.microsoft.playwright.impl.DriverException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → POST http://localhost:8085/write/api/write/write-node
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
-     - Content-Type: application/json
-     - content-length: 58

at com.microsoft.playwright.impl.Connection.dispatch(Connection.java:259)
at com.microsoft.playwright.impl.Connection.processOneMessage(Connection.java:211)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:130)
... 33 more
]]>
            </full-stacktrace>
          </exception> <!-- com.microsoft.playwright.PlaywrightException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithDifferentDataTypes -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithDifferentDataTypes status=FAILURE method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="testWriteNodeWithDifferentDataTypes" description="Test write node with different data types" data-provider="writeDataProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="323" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s=DataBlocksGlobal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Boolean value]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithDifferentDataTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithDifferentDataTypes status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="testWriteNodeWithDifferentDataTypes" description="Test write node with different data types" data-provider="writeDataProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s=DataBlocksGlobal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123.45]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Double value]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithDifferentDataTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithDifferentDataTypes status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="testWriteNodeWithDifferentDataTypes" description="Test write node with different data types" data-provider="writeDataProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=0;i=2253]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Numeric node ID with integer]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithDifferentDataTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithDifferentDataTypes status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="testWriteNodeWithDifferentDataTypes" description="Test write node with different data types" data-provider="writeDataProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=2;i=5001]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Another Test]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Another numeric node ID with string]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithDifferentDataTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithDifferentDataTypes status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="testWriteNodeWithDifferentDataTypes" description="Test write node with different data types" data-provider="writeDataProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=999;s=InvalidNode]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Invalid node ID]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithDifferentDataTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithDifferentDataTypes status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="testWriteNodeWithDifferentDataTypes" description="Test write node with different data types" data-provider="writeDataProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Empty node ID]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithDifferentDataTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithDifferentDataTypes status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="testWriteNodeWithDifferentDataTypes" description="Test write node with different data types" data-provider="writeDataProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="8" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s=DataBlocksGlobal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Empty string value]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithDifferentDataTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithDifferentDataTypes status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithDifferentDataTypes(java.lang.String,java.lang.Object,java.lang.String)[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithDouble()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithDouble()[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="testWriteNodeWithDouble" description="Test write node with double value" finished-at="2025-10-10T14:44:52 IST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithDouble -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithDouble status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithDouble()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithInteger()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithInteger()[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="testWriteNodeWithInteger" description="Test write node with integer value" finished-at="2025-10-10T14:44:52 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithInteger -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithInteger status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithInteger()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testWriteNodeWithLargeData()[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="testWriteNodeWithLargeData" description="Test write node with large data" finished-at="2025-10-10T14:44:52 IST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithLargeData -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithLargeData()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithLargeData status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithLargeData()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithNullValue()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithNullValue()[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="testWriteNodeWithNullValue" description="Test write node with null value" finished-at="2025-10-10T14:44:52 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithNullValue -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithNullValue status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithNullValue()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=WriteDataServiceTest.testWriteNodeWithString()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testWriteNodeWithString()[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:52 IST" name="testWriteNodeWithString" description="Test write node with string value" finished-at="2025-10-10T14:44:53 IST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNodeWithString -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:53 IST" name="tearDownTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testWriteNodeWithString status=SUCCESS method=WriteDataServiceTest.testWriteNodeWithString()[pri:0, instance:tests.WriteDataServiceTest@2b58f754] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="tearDownRealServiceContext()[pri:0, instance:tests.WriteDataServiceTest@2b58f754]" started-at="2025-10-10T14:44:53 IST" name="tearDownRealServiceContext" finished-at="2025-10-10T14:44:53 IST" duration-ms="50" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownRealServiceContext -->
      </class> <!-- tests.WriteDataServiceTest -->
    </test> <!-- Write Data Service Tests -->
    <test started-at="2025-10-10T14:44:52 IST" name="Kafka Service Tests" finished-at="2025-10-10T14:44:53 IST" duration-ms="1487">
      <class name="tests.KafkaServiceTest">
        <test-method is-config="true" signature="setUpRealServiceContext()[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="setUpRealServiceContext" finished-at="2025-10-10T14:44:52 IST" duration-ms="493" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpRealServiceContext -->
        <test-method is-config="true" signature="setUpKafkaTests()[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="setUpKafkaTests" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpKafkaTests -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testConcurrentKafkaOperations()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testConcurrentKafkaOperations()[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="testConcurrentKafkaOperations" description="Test concurrent Kafka operations" finished-at="2025-10-10T14:44:52 IST" duration-ms="44" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentKafkaOperations -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConcurrentKafkaOperations status=SUCCESS method=KafkaServiceTest.testConcurrentKafkaOperations()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testConvertDataValue()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testConvertDataValue()[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="testConvertDataValue" description="Test convert data value endpoint" finished-at="2025-10-10T14:44:52 IST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertDataValue -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConvertDataValue status=SUCCESS method=KafkaServiceTest.testConvertDataValue()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testConvertValue()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testConvertValue()[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="testConvertValue" description="Test convert value endpoint" finished-at="2025-10-10T14:44:52 IST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertValue -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConvertValue status=SUCCESS method=KafkaServiceTest.testConvertValue()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="testConvertValueWithDifferentTypes" description="Test convert value with different data types" data-provider="convertValueProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[42]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Integer string]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertValueWithDifferentTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConvertValueWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="testConvertValueWithDifferentTypes" description="Test convert value with different data types" data-provider="convertValueProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[123.45]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Double string]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertValueWithDifferentTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConvertValueWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="testConvertValueWithDifferentTypes" description="Test convert value with different data types" data-provider="convertValueProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Boolean string]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertValueWithDifferentTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConvertValueWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="testConvertValueWithDifferentTypes" description="Test convert value with different data types" data-provider="convertValueProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Boolean string]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertValueWithDifferentTypes -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConvertValueWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="testConvertValueWithDifferentTypes" description="Test convert value with different data types" data-provider="convertValueProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[test]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[String value]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertValueWithDifferentTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConvertValueWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="testConvertValueWithDifferentTypes" description="Test convert value with different data types" data-provider="convertValueProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Empty string]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertValueWithDifferentTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConvertValueWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="testConvertValueWithDifferentTypes" description="Test convert value with different data types" data-provider="convertValueProvider" finished-at="2025-10-10T14:44:52 IST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[null]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Null string]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertValueWithDifferentTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConvertValueWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testConvertValueWithDifferentTypes(java.lang.String,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testHasChanged()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testHasChanged()[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="testHasChanged" description="Test has changed endpoint with different values" finished-at="2025-10-10T14:44:52 IST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHasChanged -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testHasChanged status=SUCCESS method=KafkaServiceTest.testHasChanged()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testHasChangedWithIdenticalData()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testHasChangedWithIdenticalData()[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="testHasChangedWithIdenticalData" description="Test has changed with identical data" finished-at="2025-10-10T14:44:52 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHasChangedWithIdenticalData -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testHasChangedWithIdenticalData status=SUCCESS method=KafkaServiceTest.testHasChangedWithIdenticalData()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testHasChangedWithNullValues()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testHasChangedWithNullValues()[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="testHasChangedWithNullValues" description="Test has changed with null values" finished-at="2025-10-10T14:44:52 IST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHasChangedWithNullValues -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testHasChangedWithNullValues status=SUCCESS method=KafkaServiceTest.testHasChangedWithNullValues()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testKafkaErrorHandling()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testKafkaErrorHandling()[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="testKafkaErrorHandling" description="Test Kafka error handling" finished-at="2025-10-10T14:44:52 IST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testKafkaErrorHandling -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testKafkaErrorHandling status=SUCCESS method=KafkaServiceTest.testKafkaErrorHandling()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testKafkaLargeMessageHandling()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testKafkaLargeMessageHandling()[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="testKafkaLargeMessageHandling" description="Test Kafka large message handling" finished-at="2025-10-10T14:44:52 IST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testKafkaLargeMessageHandling -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testKafkaLargeMessageHandling status=SUCCESS method=KafkaServiceTest.testKafkaLargeMessageHandling()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testKafkaMessageProcessingPerformance()[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="testKafkaMessageProcessingPerformance" description="Test Kafka message processing performance" finished-at="2025-10-10T14:44:52 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testKafkaMessageProcessingPerformance -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testKafkaMessageProcessingPerformance()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testKafkaMessageProcessingPerformance status=SUCCESS method=KafkaServiceTest.testKafkaMessageProcessingPerformance()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testKafkaMessageValidation()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testKafkaMessageValidation()[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="testKafkaMessageValidation" description="Test Kafka message validation" finished-at="2025-10-10T14:44:52 IST" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testKafkaMessageValidation -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="tearDownTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testKafkaMessageValidation status=SUCCESS method=KafkaServiceTest.testKafkaMessageValidation()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="setUpTest" finished-at="2025-10-10T14:44:52 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testKafkaServiceHealth()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testKafkaServiceHealth()[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:52 IST" name="testKafkaServiceHealth" description="Test Kafka service health" finished-at="2025-10-10T14:44:53 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testKafkaServiceHealth -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="tearDownTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testKafkaServiceHealth status=SUCCESS method=KafkaServiceTest.testKafkaServiceHealth()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="setUpTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testProcessBrowseData()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testProcessBrowseData()[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="testProcessBrowseData" description="Test process browse data endpoint" finished-at="2025-10-10T14:44:53 IST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessBrowseData -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="tearDownTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testProcessBrowseData status=SUCCESS method=KafkaServiceTest.testProcessBrowseData()[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="setUpTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="16" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="testProcessBrowseDataWithDifferentTypes" description="Test process browse data with different data types" data-provider="browseDataProvider" finished-at="2025-10-10T14:44:53 IST" duration-ms="328" status="FAIL">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s=DataBlocksGlobal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{tag=Tag1, value=123, timestamp=1760087693022}]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Integer value]]>
              </value>
            </param>
          </params>
          <exception class="com.microsoft.playwright.PlaywrightException">
            <message>
              <![CDATA[Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → POST http://localhost:8085/kafka/api/kafkaBrowse/processBrowseData
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
-     - Content-Type: application/json
-     - content-length: 102
]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.microsoft.playwright.PlaywrightException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → POST http://localhost:8085/kafka/api/kafkaBrowse/processBrowseData
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
-     - Content-Type: application/json
-     - content-length: 102

at com.microsoft.playwright.impl.WaitableResult.get(WaitableResult.java:56)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:132)
at com.microsoft.playwright.impl.Connection.sendMessage(Connection.java:130)
at com.microsoft.playwright.impl.ChannelOwner.sendMessage(ChannelOwner.java:118)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetchImpl(APIRequestContextImpl.java:156)
at com.microsoft.playwright.impl.APIRequestContextImpl.lambda$fetch$1(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.LoggingSupport.withLogging(LoggingSupport.java:47)
at com.microsoft.playwright.impl.ChannelOwner.withLogging(ChannelOwner.java:97)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetch(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.APIRequestContextImpl.post(APIRequestContextImpl.java:212)
at base.RealServiceTestBase.processBrowseData(RealServiceTestBase.java:402)
at tests.KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(KafkaServiceTest.java:41)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.microsoft.playwright.impl.DriverException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → POST http://localhost:8085/kafka/api/kafkaBrowse/processBrowseData
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
-     - Content-Type: application/json
-     - content-length: 102

at com.microsoft.playwright.impl.Connection.dispatch(Connection.java:259)
at com.microsoft.playwright.impl.Connection.processOneMessage(Connection.java:211)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:130)
... 33 more
]]>
            </full-stacktrace>
          </exception> <!-- com.microsoft.playwright.PlaywrightException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessBrowseDataWithDifferentTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="tearDownTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testProcessBrowseDataWithDifferentTypes status=FAILURE method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method signature="testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="testProcessBrowseDataWithDifferentTypes" description="Test process browse data with different data types" data-provider="browseDataProvider" finished-at="2025-10-10T14:44:53 IST" duration-ms="320" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s=DataBlocksGlobal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{tag=Tag2, value=String Value, timestamp=1760087693022}]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[String value]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessBrowseDataWithDifferentTypes -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="setUpTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="tearDownTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testProcessBrowseDataWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="setUpTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="testProcessBrowseDataWithDifferentTypes" description="Test process browse data with different data types" data-provider="browseDataProvider" finished-at="2025-10-10T14:44:53 IST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s=DataBlocksGlobal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{tag=Tag3, value=true, timestamp=1760087693022}]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Boolean value]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessBrowseDataWithDifferentTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="tearDownTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testProcessBrowseDataWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="setUpTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="testProcessBrowseDataWithDifferentTypes" description="Test process browse data with different data types" data-provider="browseDataProvider" finished-at="2025-10-10T14:44:53 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=3;s=DataBlocksGlobal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{tag=Tag4, value=123.45, timestamp=1760087693022}]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Double value]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessBrowseDataWithDifferentTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="tearDownTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testProcessBrowseDataWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="setUpTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="testProcessBrowseDataWithDifferentTypes" description="Test process browse data with different data types" data-provider="browseDataProvider" finished-at="2025-10-10T14:44:53 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=0;i=2253]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{tag=Tag5, value=42, timestamp=1760087693022}]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Numeric node ID]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessBrowseDataWithDifferentTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="tearDownTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testProcessBrowseDataWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="setUpTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="testProcessBrowseDataWithDifferentTypes" description="Test process browse data with different data types" data-provider="browseDataProvider" finished-at="2025-10-10T14:44:53 IST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[ns=2;i=5001]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[{tag=Tag6, value=Another String, timestamp=1760087693022}]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Another numeric node ID]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testProcessBrowseDataWithDifferentTypes -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="tearDownTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testProcessBrowseDataWithDifferentTypes status=SUCCESS method=KafkaServiceTest.testProcessBrowseDataWithDifferentTypes(java.lang.String,java.util.Map,java.lang.String)[pri:0, instance:tests.KafkaServiceTest@2b62442c] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="tearDownRealServiceContext()[pri:0, instance:tests.KafkaServiceTest@2b62442c]" started-at="2025-10-10T14:44:53 IST" name="tearDownRealServiceContext" finished-at="2025-10-10T14:44:53 IST" duration-ms="32" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownRealServiceContext -->
      </class> <!-- tests.KafkaServiceTest -->
    </test> <!-- Kafka Service Tests -->
    <test started-at="2025-10-10T14:44:53 IST" name="Legacy API Tests (Mock Server)" finished-at="2025-10-10T14:44:56 IST" duration-ms="3484">
      <class name="tests.ApiTestExecutor">
        <test-method is-config="true" signature="setUpApiContext()[pri:0, instance:tests.ApiTestExecutor@72ccd81a]" started-at="2025-10-10T14:44:42 IST" name="setUpApiContext" finished-at="2025-10-10T14:44:51 IST" duration-ms="8907" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpApiContext -->
        <test-method is-config="true" signature="setup()[pri:0, instance:tests.ApiTestExecutor@72ccd81a]" started-at="2025-10-10T14:44:53 IST" name="setup" finished-at="2025-10-10T14:44:53 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setup -->
        <test-method signature="testBrowseTags()[pri:0, instance:tests.ApiTestExecutor@72ccd81a]" started-at="2025-10-10T14:44:53 IST" name="testBrowseTags" finished-at="2025-10-10T14:44:53 IST" duration-ms="327" status="FAIL">
          <exception class="com.microsoft.playwright.PlaywrightException">
            <message>
              <![CDATA[Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/browse?startingNodeParam=ns=3;s=%22WMS%20TO%20PLC%22
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.microsoft.playwright.PlaywrightException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/browse?startingNodeParam=ns=3;s=%22WMS%20TO%20PLC%22
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.WaitableResult.get(WaitableResult.java:56)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:132)
at com.microsoft.playwright.impl.Connection.sendMessage(Connection.java:130)
at com.microsoft.playwright.impl.ChannelOwner.sendMessage(ChannelOwner.java:118)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetchImpl(APIRequestContextImpl.java:156)
at com.microsoft.playwright.impl.APIRequestContextImpl.lambda$fetch$1(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.LoggingSupport.withLogging(LoggingSupport.java:47)
at com.microsoft.playwright.impl.ChannelOwner.withLogging(ChannelOwner.java:97)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetch(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.APIRequestContextImpl.get(APIRequestContextImpl.java:197)
at com.microsoft.playwright.APIRequestContext.get(APIRequestContext.java:281)
at tests.ApiTestExecutor.testBrowseTags(ApiTestExecutor.java:65)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.microsoft.playwright.impl.DriverException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/browse?startingNodeParam=ns=3;s=%22WMS%20TO%20PLC%22
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.Connection.dispatch(Connection.java:259)
at com.microsoft.playwright.impl.Connection.processOneMessage(Connection.java:211)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:130)
... 33 more
]]>
            </full-stacktrace>
          </exception> <!-- com.microsoft.playwright.PlaywrightException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBrowseTags -->
        <test-method signature="testConvertDataValue()[pri:0, instance:tests.ApiTestExecutor@72ccd81a]" started-at="2025-10-10T14:44:53 IST" name="testConvertDataValue" finished-at="2025-10-10T14:44:53 IST" duration-ms="314" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertDataValue -->
        <test-method signature="testConvertValue()[pri:0, instance:tests.ApiTestExecutor@72ccd81a]" started-at="2025-10-10T14:44:53 IST" name="testConvertValue" finished-at="2025-10-10T14:44:53 IST" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConvertValue -->
        <test-method signature="testKafkaHasChanged()[pri:0, instance:tests.ApiTestExecutor@72ccd81a]" started-at="2025-10-10T14:44:53 IST" name="testKafkaHasChanged" finished-at="2025-10-10T14:44:53 IST" duration-ms="5" status="FAIL">
          <exception class="com.microsoft.playwright.PlaywrightException">
            <message>
              <![CDATA[Error {
  message='socket hang up
  name='Error
  stack='Error: socket hang up
    at Socket.socketOnEnd (node:_http_client:530:25)
    at Socket.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
}
Call log:
-   - → POST http://localhost:8085/kafka/api/kafkaBrowse/hasChanged
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
-     - Content-Type: application/json
-     - content-length: 45
]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.microsoft.playwright.PlaywrightException: Error {
  message='socket hang up
  name='Error
  stack='Error: socket hang up
    at Socket.socketOnEnd (node:_http_client:530:25)
    at Socket.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
}
Call log:
-   - → POST http://localhost:8085/kafka/api/kafkaBrowse/hasChanged
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
-     - Content-Type: application/json
-     - content-length: 45

at com.microsoft.playwright.impl.WaitableResult.get(WaitableResult.java:56)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:132)
at com.microsoft.playwright.impl.Connection.sendMessage(Connection.java:130)
at com.microsoft.playwright.impl.ChannelOwner.sendMessage(ChannelOwner.java:118)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetchImpl(APIRequestContextImpl.java:156)
at com.microsoft.playwright.impl.APIRequestContextImpl.lambda$fetch$1(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.LoggingSupport.withLogging(LoggingSupport.java:47)
at com.microsoft.playwright.impl.ChannelOwner.withLogging(ChannelOwner.java:97)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetch(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.APIRequestContextImpl.post(APIRequestContextImpl.java:212)
at tests.ApiTestExecutor.testKafkaHasChanged(ApiTestExecutor.java:125)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.microsoft.playwright.impl.DriverException: Error {
  message='socket hang up
  name='Error
  stack='Error: socket hang up
    at Socket.socketOnEnd (node:_http_client:530:25)
    at Socket.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
}
Call log:
-   - → POST http://localhost:8085/kafka/api/kafkaBrowse/hasChanged
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
-     - Content-Type: application/json
-     - content-length: 45

at com.microsoft.playwright.impl.Connection.dispatch(Connection.java:259)
at com.microsoft.playwright.impl.Connection.processOneMessage(Connection.java:211)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:130)
... 32 more
]]>
            </full-stacktrace>
          </exception> <!-- com.microsoft.playwright.PlaywrightException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testKafkaHasChanged -->
        <test-method signature="testKafkaProcessBrowseData()[pri:0, instance:tests.ApiTestExecutor@72ccd81a]" started-at="2025-10-10T14:44:53 IST" name="testKafkaProcessBrowseData" finished-at="2025-10-10T14:44:54 IST" duration-ms="313" status="FAIL">
          <exception class="com.microsoft.playwright.PlaywrightException">
            <message>
              <![CDATA[Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → POST http://localhost:8085/kafka/api/kafkaBrowse/processBrowseData
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
-     - Content-Type: application/json
-     - content-length: 76
]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.microsoft.playwright.PlaywrightException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → POST http://localhost:8085/kafka/api/kafkaBrowse/processBrowseData
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
-     - Content-Type: application/json
-     - content-length: 76

at com.microsoft.playwright.impl.WaitableResult.get(WaitableResult.java:56)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:132)
at com.microsoft.playwright.impl.Connection.sendMessage(Connection.java:130)
at com.microsoft.playwright.impl.ChannelOwner.sendMessage(ChannelOwner.java:118)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetchImpl(APIRequestContextImpl.java:156)
at com.microsoft.playwright.impl.APIRequestContextImpl.lambda$fetch$1(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.LoggingSupport.withLogging(LoggingSupport.java:47)
at com.microsoft.playwright.impl.ChannelOwner.withLogging(ChannelOwner.java:97)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetch(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.APIRequestContextImpl.post(APIRequestContextImpl.java:212)
at tests.ApiTestExecutor.testKafkaProcessBrowseData(ApiTestExecutor.java:115)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.microsoft.playwright.impl.DriverException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → POST http://localhost:8085/kafka/api/kafkaBrowse/processBrowseData
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
-     - Content-Type: application/json
-     - content-length: 76

at com.microsoft.playwright.impl.Connection.dispatch(Connection.java:259)
at com.microsoft.playwright.impl.Connection.processOneMessage(Connection.java:211)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:130)
... 32 more
]]>
            </full-stacktrace>
          </exception> <!-- com.microsoft.playwright.PlaywrightException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testKafkaProcessBrowseData -->
        <test-method signature="testOpcConnect()[pri:0, instance:tests.ApiTestExecutor@72ccd81a]" started-at="2025-10-10T14:44:54 IST" name="testOpcConnect" finished-at="2025-10-10T14:44:54 IST" duration-ms="306" status="FAIL">
          <exception class="com.microsoft.playwright.PlaywrightException">
            <message>
              <![CDATA[Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/opcua/api/connection/connect
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.microsoft.playwright.PlaywrightException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/opcua/api/connection/connect
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.WaitableResult.get(WaitableResult.java:56)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:132)
at com.microsoft.playwright.impl.Connection.sendMessage(Connection.java:130)
at com.microsoft.playwright.impl.ChannelOwner.sendMessage(ChannelOwner.java:118)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetchImpl(APIRequestContextImpl.java:156)
at com.microsoft.playwright.impl.APIRequestContextImpl.lambda$fetch$1(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.LoggingSupport.withLogging(LoggingSupport.java:47)
at com.microsoft.playwright.impl.ChannelOwner.withLogging(ChannelOwner.java:97)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetch(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.APIRequestContextImpl.get(APIRequestContextImpl.java:197)
at com.microsoft.playwright.APIRequestContext.get(APIRequestContext.java:281)
at tests.ApiTestExecutor.testOpcConnect(ApiTestExecutor.java:57)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.microsoft.playwright.impl.DriverException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/opcua/api/connection/connect
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.Connection.dispatch(Connection.java:259)
at com.microsoft.playwright.impl.Connection.processOneMessage(Connection.java:211)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:130)
... 33 more
]]>
            </full-stacktrace>
          </exception> <!-- com.microsoft.playwright.PlaywrightException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcConnect -->
        <test-method signature="testOpcConnectionStatus()[pri:0, instance:tests.ApiTestExecutor@72ccd81a]" started-at="2025-10-10T14:44:54 IST" name="testOpcConnectionStatus" finished-at="2025-10-10T14:44:54 IST" duration-ms="312" status="FAIL">
          <exception class="com.microsoft.playwright.PlaywrightException">
            <message>
              <![CDATA[Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/opcua/api/connection/status
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.microsoft.playwright.PlaywrightException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/opcua/api/connection/status
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.WaitableResult.get(WaitableResult.java:56)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:132)
at com.microsoft.playwright.impl.Connection.sendMessage(Connection.java:130)
at com.microsoft.playwright.impl.ChannelOwner.sendMessage(ChannelOwner.java:118)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetchImpl(APIRequestContextImpl.java:156)
at com.microsoft.playwright.impl.APIRequestContextImpl.lambda$fetch$1(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.LoggingSupport.withLogging(LoggingSupport.java:47)
at com.microsoft.playwright.impl.ChannelOwner.withLogging(ChannelOwner.java:97)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetch(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.APIRequestContextImpl.get(APIRequestContextImpl.java:197)
at com.microsoft.playwright.APIRequestContext.get(APIRequestContext.java:281)
at tests.ApiTestExecutor.testOpcConnectionStatus(ApiTestExecutor.java:41)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.microsoft.playwright.impl.DriverException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/opcua/api/connection/status
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.Connection.dispatch(Connection.java:259)
at com.microsoft.playwright.impl.Connection.processOneMessage(Connection.java:211)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:130)
... 33 more
]]>
            </full-stacktrace>
          </exception> <!-- com.microsoft.playwright.PlaywrightException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcConnectionStatus -->
        <test-method signature="testOpcInit()[pri:0, instance:tests.ApiTestExecutor@72ccd81a]" started-at="2025-10-10T14:44:54 IST" name="testOpcInit" finished-at="2025-10-10T14:44:55 IST" duration-ms="309" status="FAIL">
          <exception class="com.microsoft.playwright.PlaywrightException">
            <message>
              <![CDATA[Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/opcua/api/connection/init
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.microsoft.playwright.PlaywrightException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/opcua/api/connection/init
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.WaitableResult.get(WaitableResult.java:56)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:132)
at com.microsoft.playwright.impl.Connection.sendMessage(Connection.java:130)
at com.microsoft.playwright.impl.ChannelOwner.sendMessage(ChannelOwner.java:118)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetchImpl(APIRequestContextImpl.java:156)
at com.microsoft.playwright.impl.APIRequestContextImpl.lambda$fetch$1(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.LoggingSupport.withLogging(LoggingSupport.java:47)
at com.microsoft.playwright.impl.ChannelOwner.withLogging(ChannelOwner.java:97)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetch(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.APIRequestContextImpl.get(APIRequestContextImpl.java:197)
at com.microsoft.playwright.APIRequestContext.get(APIRequestContext.java:281)
at tests.ApiTestExecutor.testOpcInit(ApiTestExecutor.java:51)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.microsoft.playwright.impl.DriverException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/opcua/api/connection/init
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.Connection.dispatch(Connection.java:259)
at com.microsoft.playwright.impl.Connection.processOneMessage(Connection.java:211)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:130)
... 33 more
]]>
            </full-stacktrace>
          </exception> <!-- com.microsoft.playwright.PlaywrightException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOpcInit -->
        <test-method signature="testReadNode()[pri:0, instance:tests.ApiTestExecutor@72ccd81a]" started-at="2025-10-10T14:44:55 IST" name="testReadNode" finished-at="2025-10-10T14:44:55 IST" duration-ms="310" status="FAIL">
          <exception class="com.microsoft.playwright.PlaywrightException">
            <message>
              <![CDATA[Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/read-node?nodeId=ns=3;s=DataBlocksGlobal
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.microsoft.playwright.PlaywrightException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/read-node?nodeId=ns=3;s=DataBlocksGlobal
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.WaitableResult.get(WaitableResult.java:56)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:132)
at com.microsoft.playwright.impl.Connection.sendMessage(Connection.java:130)
at com.microsoft.playwright.impl.ChannelOwner.sendMessage(ChannelOwner.java:118)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetchImpl(APIRequestContextImpl.java:156)
at com.microsoft.playwright.impl.APIRequestContextImpl.lambda$fetch$1(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.LoggingSupport.withLogging(LoggingSupport.java:47)
at com.microsoft.playwright.impl.ChannelOwner.withLogging(ChannelOwner.java:97)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetch(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.APIRequestContextImpl.get(APIRequestContextImpl.java:197)
at com.microsoft.playwright.APIRequestContext.get(APIRequestContext.java:281)
at tests.ApiTestExecutor.testReadNode(ApiTestExecutor.java:85)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.microsoft.playwright.impl.DriverException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/read-node?nodeId=ns=3;s=DataBlocksGlobal
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.Connection.dispatch(Connection.java:259)
at com.microsoft.playwright.impl.Connection.processOneMessage(Connection.java:211)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:130)
... 33 more
]]>
            </full-stacktrace>
          </exception> <!-- com.microsoft.playwright.PlaywrightException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadNode -->
        <test-method signature="testReadNode2()[pri:0, instance:tests.ApiTestExecutor@72ccd81a]" started-at="2025-10-10T14:44:55 IST" name="testReadNode2" finished-at="2025-10-10T14:44:55 IST" duration-ms="307" status="FAIL">
          <exception class="com.microsoft.playwright.PlaywrightException">
            <message>
              <![CDATA[Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/read-node2?nodeId=MCOM
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.microsoft.playwright.PlaywrightException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/read-node2?nodeId=MCOM
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.WaitableResult.get(WaitableResult.java:56)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:132)
at com.microsoft.playwright.impl.Connection.sendMessage(Connection.java:130)
at com.microsoft.playwright.impl.ChannelOwner.sendMessage(ChannelOwner.java:118)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetchImpl(APIRequestContextImpl.java:156)
at com.microsoft.playwright.impl.APIRequestContextImpl.lambda$fetch$1(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.LoggingSupport.withLogging(LoggingSupport.java:47)
at com.microsoft.playwright.impl.ChannelOwner.withLogging(ChannelOwner.java:97)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetch(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.APIRequestContextImpl.get(APIRequestContextImpl.java:197)
at com.microsoft.playwright.APIRequestContext.get(APIRequestContext.java:281)
at tests.ApiTestExecutor.testReadNode2(ApiTestExecutor.java:92)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.microsoft.playwright.impl.DriverException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/read-node2?nodeId=MCOM
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.Connection.dispatch(Connection.java:259)
at com.microsoft.playwright.impl.Connection.processOneMessage(Connection.java:211)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:130)
... 33 more
]]>
            </full-stacktrace>
          </exception> <!-- com.microsoft.playwright.PlaywrightException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadNode2 -->
        <test-method signature="testReadValue()[pri:0, instance:tests.ApiTestExecutor@72ccd81a]" started-at="2025-10-10T14:44:55 IST" name="testReadValue" finished-at="2025-10-10T14:44:55 IST" duration-ms="311" status="FAIL">
          <exception class="com.microsoft.playwright.PlaywrightException">
            <message>
              <![CDATA[Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/readValue?nodeId=ns=3;s=%22PLC_To_WMS%22
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.microsoft.playwright.PlaywrightException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/readValue?nodeId=ns=3;s=%22PLC_To_WMS%22
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.WaitableResult.get(WaitableResult.java:56)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:132)
at com.microsoft.playwright.impl.Connection.sendMessage(Connection.java:130)
at com.microsoft.playwright.impl.ChannelOwner.sendMessage(ChannelOwner.java:118)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetchImpl(APIRequestContextImpl.java:156)
at com.microsoft.playwright.impl.APIRequestContextImpl.lambda$fetch$1(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.LoggingSupport.withLogging(LoggingSupport.java:47)
at com.microsoft.playwright.impl.ChannelOwner.withLogging(ChannelOwner.java:97)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetch(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.APIRequestContextImpl.get(APIRequestContextImpl.java:197)
at com.microsoft.playwright.APIRequestContext.get(APIRequestContext.java:281)
at tests.ApiTestExecutor.testReadValue(ApiTestExecutor.java:72)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.microsoft.playwright.impl.DriverException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/readValue?nodeId=ns=3;s=%22PLC_To_WMS%22
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.Connection.dispatch(Connection.java:259)
at com.microsoft.playwright.impl.Connection.processOneMessage(Connection.java:211)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:130)
... 33 more
]]>
            </full-stacktrace>
          </exception> <!-- com.microsoft.playwright.PlaywrightException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadValue -->
        <test-method signature="testSubscribeToData()[pri:0, instance:tests.ApiTestExecutor@72ccd81a]" started-at="2025-10-10T14:44:55 IST" name="testSubscribeToData" finished-at="2025-10-10T14:44:56 IST" duration-ms="312" status="FAIL">
          <exception class="com.microsoft.playwright.PlaywrightException">
            <message>
              <![CDATA[Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/subscribeToData
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.microsoft.playwright.PlaywrightException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/subscribeToData
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.WaitableResult.get(WaitableResult.java:56)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:132)
at com.microsoft.playwright.impl.Connection.sendMessage(Connection.java:130)
at com.microsoft.playwright.impl.ChannelOwner.sendMessage(ChannelOwner.java:118)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetchImpl(APIRequestContextImpl.java:156)
at com.microsoft.playwright.impl.APIRequestContextImpl.lambda$fetch$1(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.LoggingSupport.withLogging(LoggingSupport.java:47)
at com.microsoft.playwright.impl.ChannelOwner.withLogging(ChannelOwner.java:97)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetch(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.APIRequestContextImpl.get(APIRequestContextImpl.java:197)
at com.microsoft.playwright.APIRequestContext.get(APIRequestContext.java:281)
at tests.ApiTestExecutor.testSubscribeToData(ApiTestExecutor.java:79)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.microsoft.playwright.impl.DriverException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/subscribeToData
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.Connection.dispatch(Connection.java:259)
at com.microsoft.playwright.impl.Connection.processOneMessage(Connection.java:211)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:130)
... 33 more
]]>
            </full-stacktrace>
          </exception> <!-- com.microsoft.playwright.PlaywrightException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSubscribeToData -->
        <test-method signature="testWriteNode()[pri:0, instance:tests.ApiTestExecutor@72ccd81a]" started-at="2025-10-10T14:44:56 IST" name="testWriteNode" finished-at="2025-10-10T14:44:56 IST" duration-ms="311" status="FAIL">
          <exception class="com.microsoft.playwright.PlaywrightException">
            <message>
              <![CDATA[Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → POST http://localhost:8085/write/api/write/write-node
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
-     - Content-Type: application/json
-     - content-length: 53
]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.microsoft.playwright.PlaywrightException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → POST http://localhost:8085/write/api/write/write-node
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
-     - Content-Type: application/json
-     - content-length: 53

at com.microsoft.playwright.impl.WaitableResult.get(WaitableResult.java:56)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:132)
at com.microsoft.playwright.impl.Connection.sendMessage(Connection.java:130)
at com.microsoft.playwright.impl.ChannelOwner.sendMessage(ChannelOwner.java:118)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetchImpl(APIRequestContextImpl.java:156)
at com.microsoft.playwright.impl.APIRequestContextImpl.lambda$fetch$1(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.LoggingSupport.withLogging(LoggingSupport.java:47)
at com.microsoft.playwright.impl.ChannelOwner.withLogging(ChannelOwner.java:97)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetch(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.APIRequestContextImpl.post(APIRequestContextImpl.java:212)
at tests.ApiTestExecutor.testWriteNode(ApiTestExecutor.java:102)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.microsoft.playwright.impl.DriverException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → POST http://localhost:8085/write/api/write/write-node
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
-     - Content-Type: application/json
-     - content-length: 53

at com.microsoft.playwright.impl.Connection.dispatch(Connection.java:259)
at com.microsoft.playwright.impl.Connection.processOneMessage(Connection.java:211)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:130)
... 32 more
]]>
            </full-stacktrace>
          </exception> <!-- com.microsoft.playwright.PlaywrightException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWriteNode -->
        <test-method is-config="true" signature="teardown()[pri:0, instance:tests.ApiTestExecutor@72ccd81a]" started-at="2025-10-10T14:44:56 IST" name="teardown" finished-at="2025-10-10T14:44:56 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- teardown -->
        <test-method is-config="true" signature="tearDownApiContext()[pri:0, instance:tests.ApiTestExecutor@72ccd81a]" started-at="2025-10-10T14:44:59 IST" name="tearDownApiContext" finished-at="2025-10-10T14:44:59 IST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownApiContext -->
      </class> <!-- tests.ApiTestExecutor -->
    </test> <!-- Legacy API Tests (Mock Server) -->
    <test started-at="2025-10-10T14:44:53 IST" name="Integration Tests" finished-at="2025-10-10T14:44:59 IST" duration-ms="6314">
      <class name="tests.IntegrationTest">
        <test-method is-config="true" signature="setUpRealServiceContext()[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:53 IST" name="setUpRealServiceContext" finished-at="2025-10-10T14:44:53 IST" duration-ms="546" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpRealServiceContext -->
        <test-method is-config="true" signature="setUpIntegrationTests()[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:53 IST" name="setUpIntegrationTests" finished-at="2025-10-10T14:44:53 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpIntegrationTests -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:53 IST" name="setUpTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=IntegrationTest.testCompleteDataFlow()[pri:0, instance:tests.IntegrationTest@6e521c1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testCompleteDataFlow()[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:53 IST" name="testCompleteDataFlow" description="Test complete data flow from OPC UA to Kafka" finished-at="2025-10-10T14:44:53 IST" duration-ms="26" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCompleteDataFlow -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:53 IST" name="tearDownTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCompleteDataFlow status=SUCCESS method=IntegrationTest.testCompleteDataFlow()[pri:0, instance:tests.IntegrationTest@6e521c1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:53 IST" name="setUpTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=IntegrationTest.testConcurrentOperationsAcrossServices()[pri:0, instance:tests.IntegrationTest@6e521c1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testConcurrentOperationsAcrossServices()[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:53 IST" name="testConcurrentOperationsAcrossServices" description="Test concurrent operations across services" finished-at="2025-10-10T14:44:53 IST" duration-ms="34" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConcurrentOperationsAcrossServices -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:53 IST" name="tearDownTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testConcurrentOperationsAcrossServices status=SUCCESS method=IntegrationTest.testConcurrentOperationsAcrossServices()[pri:0, instance:tests.IntegrationTest@6e521c1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:53 IST" name="setUpTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=IntegrationTest.testDataConsistencyAcrossServices()[pri:0, instance:tests.IntegrationTest@6e521c1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testDataConsistencyAcrossServices()[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:53 IST" name="testDataConsistencyAcrossServices" description="Test data consistency across services" finished-at="2025-10-10T14:44:53 IST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDataConsistencyAcrossServices -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:53 IST" name="tearDownTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testDataConsistencyAcrossServices status=SUCCESS method=IntegrationTest.testDataConsistencyAcrossServices()[pri:0, instance:tests.IntegrationTest@6e521c1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:53 IST" name="setUpTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=IntegrationTest.testErrorPropagationAcrossServices()[pri:0, instance:tests.IntegrationTest@6e521c1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testErrorPropagationAcrossServices()[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:53 IST" name="testErrorPropagationAcrossServices" description="Test error propagation across services" finished-at="2025-10-10T14:44:53 IST" duration-ms="6" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Should return error for invalid node expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Should return error for invalid node expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at tests.IntegrationTest.testErrorPropagationAcrossServices(IntegrationTest.java:177)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testErrorPropagationAcrossServices -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:53 IST" name="tearDownTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testErrorPropagationAcrossServices status=FAILURE method=IntegrationTest.testErrorPropagationAcrossServices()[pri:0, instance:tests.IntegrationTest@6e521c1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:53 IST" name="setUpTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=IntegrationTest.testPerformanceUnderLoad()[pri:0, instance:tests.IntegrationTest@6e521c1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testPerformanceUnderLoad()[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:53 IST" name="testPerformanceUnderLoad" description="Test performance under load" finished-at="2025-10-10T14:44:53 IST" duration-ms="22" status="FAIL">
          <exception class="com.microsoft.playwright.PlaywrightException">
            <message>
              <![CDATA[Error {
  message='socket hang up
  name='Error
  stack='Error: socket hang up
    at Socket.socketOnEnd (node:_http_client:530:25)
    at Socket.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/browse?startingNodeParam=ns=3;s=%22WMS%20TO%20PLC%22
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.microsoft.playwright.PlaywrightException: Error {
  message='socket hang up
  name='Error
  stack='Error: socket hang up
    at Socket.socketOnEnd (node:_http_client:530:25)
    at Socket.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/browse?startingNodeParam=ns=3;s=%22WMS%20TO%20PLC%22
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.WaitableResult.get(WaitableResult.java:56)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:132)
at com.microsoft.playwright.impl.Connection.sendMessage(Connection.java:130)
at com.microsoft.playwright.impl.ChannelOwner.sendMessage(ChannelOwner.java:118)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetchImpl(APIRequestContextImpl.java:156)
at com.microsoft.playwright.impl.APIRequestContextImpl.lambda$fetch$1(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.LoggingSupport.withLogging(LoggingSupport.java:47)
at com.microsoft.playwright.impl.ChannelOwner.withLogging(ChannelOwner.java:97)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetch(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.APIRequestContextImpl.get(APIRequestContextImpl.java:197)
at com.microsoft.playwright.APIRequestContext.get(APIRequestContext.java:281)
at base.RealServiceTestBase.browseTags(RealServiceTestBase.java:349)
at tests.IntegrationTest.testPerformanceUnderLoad(IntegrationTest.java:204)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.microsoft.playwright.impl.DriverException: Error {
  message='socket hang up
  name='Error
  stack='Error: socket hang up
    at Socket.socketOnEnd (node:_http_client:530:25)
    at Socket.emit (node:events:530:35)
    at endReadableNT (node:internal/streams/readable:1698:12)
    at process.processTicksAndRejections (node:internal/process/task_queues:90:21)
}
Call log:
-   - → GET http://localhost:8085/read/api/read/browse?startingNodeParam=ns=3;s=%22WMS%20TO%20PLC%22
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.Connection.dispatch(Connection.java:259)
at com.microsoft.playwright.impl.Connection.processOneMessage(Connection.java:211)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:130)
... 34 more
]]>
            </full-stacktrace>
          </exception> <!-- com.microsoft.playwright.PlaywrightException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPerformanceUnderLoad -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:53 IST" name="tearDownTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testPerformanceUnderLoad status=FAILURE method=IntegrationTest.testPerformanceUnderLoad()[pri:0, instance:tests.IntegrationTest@6e521c1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:53 IST" name="setUpTest" finished-at="2025-10-10T14:44:53 IST" duration-ms="13" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=IntegrationTest.testReadWriteCycle()[pri:0, instance:tests.IntegrationTest@6e521c1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testReadWriteCycle()[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:53 IST" name="testReadWriteCycle" description="Test read-write cycle" finished-at="2025-10-10T14:44:54 IST" duration-ms="312" status="FAIL">
          <exception class="com.microsoft.playwright.PlaywrightException">
            <message>
              <![CDATA[Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → POST http://localhost:8085/write/api/write/write-node
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
-     - Content-Type: application/json
-     - content-length: 48
]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.microsoft.playwright.PlaywrightException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → POST http://localhost:8085/write/api/write/write-node
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
-     - Content-Type: application/json
-     - content-length: 48

at com.microsoft.playwright.impl.WaitableResult.get(WaitableResult.java:56)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:132)
at com.microsoft.playwright.impl.Connection.sendMessage(Connection.java:130)
at com.microsoft.playwright.impl.ChannelOwner.sendMessage(ChannelOwner.java:118)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetchImpl(APIRequestContextImpl.java:156)
at com.microsoft.playwright.impl.APIRequestContextImpl.lambda$fetch$1(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.LoggingSupport.withLogging(LoggingSupport.java:47)
at com.microsoft.playwright.impl.ChannelOwner.withLogging(ChannelOwner.java:97)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetch(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.APIRequestContextImpl.post(APIRequestContextImpl.java:212)
at base.RealServiceTestBase.writeNode(RealServiceTestBase.java:390)
at tests.IntegrationTest.testReadWriteCycle(IntegrationTest.java:74)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.microsoft.playwright.impl.DriverException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → POST http://localhost:8085/write/api/write/write-node
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
-     - Content-Type: application/json
-     - content-length: 48

at com.microsoft.playwright.impl.Connection.dispatch(Connection.java:259)
at com.microsoft.playwright.impl.Connection.processOneMessage(Connection.java:211)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:130)
... 33 more
]]>
            </full-stacktrace>
          </exception> <!-- com.microsoft.playwright.PlaywrightException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testReadWriteCycle -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:54 IST" name="tearDownTest" finished-at="2025-10-10T14:44:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testReadWriteCycle status=FAILURE method=IntegrationTest.testReadWriteCycle()[pri:0, instance:tests.IntegrationTest@6e521c1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:54 IST" name="setUpTest" finished-at="2025-10-10T14:44:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=IntegrationTest.testServiceDiscovery()[pri:0, instance:tests.IntegrationTest@6e521c1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testServiceDiscovery()[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:54 IST" name="testServiceDiscovery" description="Test service discovery and health check" finished-at="2025-10-10T14:44:54 IST" duration-ms="302" status="FAIL">
          <exception class="com.microsoft.playwright.PlaywrightException">
            <message>
              <![CDATA[Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/eureka/actuator/health
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br
]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.microsoft.playwright.PlaywrightException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/eureka/actuator/health
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.WaitableResult.get(WaitableResult.java:56)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:132)
at com.microsoft.playwright.impl.Connection.sendMessage(Connection.java:130)
at com.microsoft.playwright.impl.ChannelOwner.sendMessage(ChannelOwner.java:118)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetchImpl(APIRequestContextImpl.java:156)
at com.microsoft.playwright.impl.APIRequestContextImpl.lambda$fetch$1(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.LoggingSupport.withLogging(LoggingSupport.java:47)
at com.microsoft.playwright.impl.ChannelOwner.withLogging(ChannelOwner.java:97)
at com.microsoft.playwright.impl.APIRequestContextImpl.fetch(APIRequestContextImpl.java:68)
at com.microsoft.playwright.impl.APIRequestContextImpl.get(APIRequestContextImpl.java:197)
at com.microsoft.playwright.APIRequestContext.get(APIRequestContext.java:281)
at base.RealServiceTestBase.getServiceRegistryStatus(RealServiceTestBase.java:430)
at tests.IntegrationTest.testServiceDiscovery(IntegrationTest.java:93)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
Caused by: com.microsoft.playwright.impl.DriverException: Error {
  message='connect ECONNREFUSED ::1:8085
  name='Error
  stack='Error: connect ECONNREFUSED ::1:8085
    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1610:16)
}
Call log:
-   - → GET http://localhost:8085/eureka/actuator/health
-     - user-agent: Playwright/1.49.0 (x64; windows 10.0) java/17
-     - accept: */*
-     - accept-encoding: gzip,deflate,br

at com.microsoft.playwright.impl.Connection.dispatch(Connection.java:259)
at com.microsoft.playwright.impl.Connection.processOneMessage(Connection.java:211)
at com.microsoft.playwright.impl.ChannelOwner.runUntil(ChannelOwner.java:130)
... 34 more
]]>
            </full-stacktrace>
          </exception> <!-- com.microsoft.playwright.PlaywrightException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testServiceDiscovery -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:54 IST" name="tearDownTest" finished-at="2025-10-10T14:44:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testServiceDiscovery status=FAILURE method=IntegrationTest.testServiceDiscovery()[pri:0, instance:tests.IntegrationTest@6e521c1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="setUpTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:54 IST" name="setUpTest" finished-at="2025-10-10T14:44:54 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name={null} status=CREATED method=IntegrationTest.testServiceRecoveryAfterFailure()[pri:0, instance:tests.IntegrationTest@6e521c1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpTest -->
        <test-method signature="testServiceRecoveryAfterFailure()[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:54 IST" name="testServiceRecoveryAfterFailure" description="Test service recovery after failure" finished-at="2025-10-10T14:44:59 IST" duration-ms="4965" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Service should recover within 3 attempts expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Service should recover within 3 attempts expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at tests.IntegrationTest.testServiceRecoveryAfterFailure(IntegrationTest.java:290)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.access$000(SuiteRunner.java:28)
at org.testng.SuiteRunner$SuiteWorker.run(SuiteRunner.java:418)
at org.testng.internal.thread.ThreadUtil.lambda$execute$0(ThreadUtil.java:64)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
at java.base/java.lang.Thread.run(Thread.java:833)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testServiceRecoveryAfterFailure -->
        <test-method is-config="true" signature="tearDownTest(org.testng.ITestResult)[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:59 IST" name="tearDownTest" finished-at="2025-10-10T14:44:59 IST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testServiceRecoveryAfterFailure status=FAILURE method=IntegrationTest.testServiceRecoveryAfterFailure()[pri:0, instance:tests.IntegrationTest@6e521c1e] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownTest -->
        <test-method is-config="true" signature="tearDownRealServiceContext()[pri:0, instance:tests.IntegrationTest@6e521c1e]" started-at="2025-10-10T14:44:59 IST" name="tearDownRealServiceContext" finished-at="2025-10-10T14:44:59 IST" duration-ms="21" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownRealServiceContext -->
      </class> <!-- tests.IntegrationTest -->
    </test> <!-- Integration Tests -->
  </suite> <!-- Microservices API Test Suite -->
</testng-results>
